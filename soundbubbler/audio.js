/*** globals ***/
	/* constants */
		const AUDIO_J = {
			constants: {
				arbitrarilySmall: 0.001,
				ms: 1000,
				semitonesPerOctave: 12,
				tuningAHz: 440,
				tuningAMidi: 69,
				oscillatorFactor: 1.05946309436,
				waveCount: 32,
				bufferCount: 1024,
				envelopeComponents: ["attack", "decay", "sustain", "release"],
				bitcrusherBits: [64, 32, 16, 8, 4, 2, 1],
				filterOctaves: 10,
				filterGainMinimum: -50,
				filterGainMaximum: 50,
				filterGainThreshold: 2,
				lowShelfThreshold: 65,
				highShelfThreshold: 4000,
				Qmax: 10000,
				minFrequency: 1,
				maxFrequency: 20000,
				minPitch: 8.175,
				maxPitch: 16744.04,
				echoFeedbackMaximum: 0.9,
				minVelocity: 0,
				defaultVelocity: 1,
				maxVelocity: 2,
				midiVelocityFactor: 64,
				notes: {
					// midi:  [Hz, name, accidental, octave]
					// octave -1
						"0":  [8.175, "C", 0, -1], 			// C-1
						"1":  [8.66, "C", 1, -1], 			// C#-1 / Db-1
						"2":  [9.175, "D", 0, -1], 			// D-1
						"3":  [9.725, "E", -1, -1], 		// D#-1 / Eb-1
						"4":  [10.30, "E", 0, -1], 			// E-1
						"5":  [10.915, "F", 0, -1], 		// F-1
						"6":  [11.56, "F", 1, -1], 			// F#-1 / Gb-1
						"7":  [12.25, "G", 0, -1], 			// -1
						"8":  [12.98, "A", -1, -1], 		// G#-1 / Ab-1
						"9":  [13.75, "A", 0, -1], 			// A-1
						"10": [14.57, "B", -1, -1], 		// A#-1 / Bb-1
						"11": [15.435, "B", 0, -1], 		// B-1
					// octave 0
						"12": [16.35, "C", 0, 0], 			// C0
						"13": [17.32, "C", 1, 0], 			// C#0 / Db0
						"14": [18.35, "D", 0, 0], 			// D0
						"15": [19.45, "E", -1, 0], 			// D#0 / Eb0
						"16": [20.60, "E", 0, 0], 			// E0
						"17": [21.83, "F", 0, 0], 			// F0
						"18": [23.12, "F", 1, 0], 			// F#0 / Gb0
						"19": [24.50, "G", 0, 0], 			// 0
						"20": [25.96, "A", -1, 0], 			// G#0 / Ab0
						"21": [27.50, "A", 0, 0], 			// A0
						"22": [29.14, "B", -1, 0], 			// A#0 / Bb0
						"23": [30.87, "B", 0, 0], 			// B0
					// octave 1
						"24": [32.70, "C", 0, 1], 			// C1
						"25": [34.65, "C", 1, 1], 			// C#1 / Db1
						"26": [36.71, "D", 0, 1], 			// D1
						"27": [38.89, "E", -1, 1], 			// D#1 / Eb1
						"28": [41.20, "E", 0, 1], 			// E1
						"29": [43.65, "F", 0, 1], 			// F1
						"30": [46.25, "F", 1, 1], 			// F#1 / Gb1
						"31": [49.00, "G", 0, 1], 			// 1
						"32": [51.91, "A", -1, 1], 			// G#1 / Ab1
						"33": [55.00, "A", 0, 1], 			// A1
						"34": [58.27, "B", -1, 1], 			// A#1 / Bb1
						"35": [61.74, "B", 0, 1], 			// B1
					// octave 2
						"36": [65.41, "C", 0, 2], 			// C2
						"37": [69.30, "C", 1, 2], 			// C#2 / Db2
						"38": [73.42, "D", 0, 2], 			// D2
						"39": [77.78, "E", -1, 2], 			// D#2 / Eb2
						"40": [82.41, "E", 0, 2], 			// E2
						"41": [87.31, "F", 0, 2], 			// F2
						"42": [92.50, "F", 1, 2], 			// F#2 / Gb2
						"43": [98.00, "G", 0, 2], 			// 2
						"44": [103.83, "A", -1, 2], 		// G#2 / Ab2
						"45": [110.00, "A", 0, 2], 			// A2
						"46": [116.54, "B", -1, 2], 		// A#2 / Bb2
						"47": [123.47, "B", 0, 2], 			// B2
					// octave 3
						"48": [130.81, "C", 0, 3], 			// C3
						"49": [138.59, "C", 1, 3], 			// C#3 / Db3
						"50": [146.83, "D", 0, 3], 			// D3
						"51": [155.56, "E", -1, 3], 		// D#3 / Eb3
						"52": [164.81, "E", 0, 3], 			// E3
						"53": [174.61, "F", 0, 3], 			// F3
						"54": [185.00, "F", 1, 3], 			// F#3 / Gb3
						"55": [196.00, "G", 0, 3], 			// G
						"56": [207.65, "A", -1, 3], 		// G#3 / Ab3
						"57": [220.00, "A", 0, 3], 			// A3
						"58": [233.08, "B", -1, 3], 		// A#3 / Bb3
						"59": [246.94, "B", 0, 3], 			// B3
					// octave 4
						"60": [261.63, "C", 0, 4], 			// C4
						"61": [277.18, "C", 1, 4], 			// C#4 / Db4
						"62": [293.67, "D", 0, 4], 			// D4
						"63": [311.13, "E", -1, 4], 		// D#4 / Eb4
						"64": [329.63, "E", 0, 4], 			// E4
						"65": [349.23, "F", 0, 4], 			// F4
						"66": [369.99, "F", 1, 4], 			// F#4 / Gb4
						"67": [392.00, "G", 0, 4], 			// G4
						"68": [415.30, "A", -1, 4], 		// G#4 / Ab4
						"69": [440.00, "A", 0, 4], 			// A4
						"70": [466.16, "B", -1, 4], 		// A#4 / Bb4
						"71": [493.88, "B", 0, 4], 			// B4
					// octave 5
						"72": [523.25, "C", 0, 5], 			// C5
						"73": [554.37, "C", 1, 5], 			// C#5 / Db5
						"74": [587.33, "D", 0, 5], 			// D5
						"75": [622.25, "E", -1, 5], 		// D#5 / Eb5
						"76": [659.25, "E", 0, 5], 			// E5
						"77": [698.46, "F", 0, 5], 			// F5
						"78": [739.99, "F", 1, 5], 			// F#5 / Gb5
						"79": [783.99, "G", 0, 5], 			// G5
						"80": [830.61, "A", -1, 5], 		// G#5 / Ab5
						"81": [880.00, "A", 0, 5], 			// A5
						"82": [932.33, "B", -1, 5], 		// A#5 / Bb5
						"83": [987.77, "B", 0, 5], 			// B5
					// octave 6
						"84": [1046.50, "C", 0, 6], 		// C6
						"85": [1108.73, "C", 1, 6], 		// C#6 / Db6
						"86": [1174.66, "D", 0, 6], 		// D6
						"87": [1244.51, "E", -1, 6], 		// D#6 / Eb6
						"88": [1318.51, "E", 0, 6], 		// E6
						"89": [1396.91, "F", 0, 6], 		// F6
						"90": [1479.98, "F", 1, 6], 		// F#6 / Gb6
						"91": [1567.98, "G", 0, 6], 		// G6
						"92": [1661.22, "A", -1, 6], 		// G#6 / Ab6
						"93": [1760.00, "A", 0, 6], 		// A6
						"94": [1864.66, "B", -1, 6], 		// A#6 / Bb6
						"95": [1975.53, "B", 0, 6], 		// B6
					// octave 7
						"96": [2093.00, "C", 0, 7], 		// C7
						"97": [2217.46, "C", 1, 7], 		// C#7 / Db7
						"98": [2349.32, "D", 0, 7], 		// D7
						"99": [2489.02, "E", -1, 7], 		// D#7 / Eb7
						"100":[2637.02, "E", 0, 7], 		// E7
						"101":[2793.83, "F", 0, 7], 		// F7
						"102":[2959.96, "F", 1, 7], 		// F#7 / Gb7
						"103":[3135.96, "G", 0, 7], 		// G7
						"104":[3322.44, "A", -1, 7], 		// G#7 / Ab7
						"105":[3520.00, "A", 0, 7], 		// A7
						"106":[3729.31, "B", -1, 7], 		// A#7 / Bb7
						"107":[3951.07, "B", 0, 7], 		// B7
					// octave 8
						"108":[4186.01, "C", 0, 8], 		// C8
						"109":[4434.92, "C", 1, 8], 		// C#8 / Db8
						"110":[4698.63, "D", 0, 8], 		// D8
						"111":[4978.03, "E", -1, 8], 		// D#8 / Eb8
						"112":[5274.04, "E", 0, 8], 		// E8
						"113":[5587.65, "F", 0, 8], 		// F8
						"114":[5919.91, "F", 1, 8], 		// F#8 / Gb8
						"115":[6271.93, "G", 0, 8], 		// G8
						"116":[6644.88, "A", -1, 8], 		// G#8 / Ab8
						"117":[7040.00, "A", 0, 8], 		// A8
						"118":[7458.62, "B", -1, 8], 		// A#8 / Bb8
						"119":[7902.13, "B", 0, 8], 		// B8
					// octave 9
						"120":[8372.02, "C", 0, 9], 		// C9
						"121":[8869.84, "C", 1, 9], 		// C#9 / Db9
						"122":[9397.26, "D", 0, 9], 		// D9
						"123":[9956.06, "E", -1, 9], 		// D#9 / Eb9
						"124":[10548.08, "E", 0, 9], 		// E9
						"125":[11175.30, "F", 0, 9], 		// F9
						"126":[11839.82, "F", 1, 9], 		// F#9 / Gb9
						"127":[12543.86, "G", 0, 9], 		// G9
						"128":[13289.76, "A", -1, 9], 		// G#9 / Ab9
						"129":[14080.00, "A", 0, 9], 		// A9
						"130":[14917.24, "B", -1, 9], 		// A#9 / Bb9
						"131":[15804.26, "B", 0, 9], 		// B9
					// octave 10
						"132":[16744.04, "C", 0, 10] 		// C10
				},
				intervals: {
					"0": ["U", "unison"],
					"1": ["m2", "minor second"],
					"2": ["M2", "major second"],
					"3": ["m3", "minor third"],
					"4": ["M3", "major third"],
					"5": ["P4", "perfect fourth"],
					"6": ["Tt", "tritone"],
					"7": ["P5", "perfect fifth"],
					"8": ["m6", "minor sixth"],
					"9": ["M6", "major sixth"],
					"10": ["m7", "minor seventh"],
					"11": ["M7", "major seventh"],
					"12": ["8ve", "octave"]
				}
			},
			activeInstrumentId: null,
			audio: null,
			master: null,
			noise: {
				white: null,
				pink: null,
				brown: null
			},
			midi: {
				system: null,
				controllers: {},
				consumers: {},
				sustained: {},
				pedal: null,
				connectDevice: null,
				disconnectDevice: null,
				pressKey: null,
				liftKey: null,
				pressPedal: null,
				liftPedal: null,
			},
			recorder: {
				data: [],
				mediaStreamDestination: null,
				mediaRecorder: null,
				download: false
			},
			instruments: [],
			simpleInstruments: {
				"sine": {
					"name": "sine",
					"polysynth": {
						"0": true,
					},
					"imag": [0, 1]
				},
				"square": {
					"name": "square",
					"polysynth": {
						"0": true,
					},
					"imag": [0, (1/1), 0, (1/3), 0, (1/5), 0, (1/7), 0, (1/9), 0, (1/11), 0, (1/13), 0, (1/15), 0, (1/17), 0, (1/19), 0, (1/21), 0, (1/23), 0, (1/25), 0, (1/27), 0, (1/29), 0, (1/31), 0],
				},
				"triangle": {
					"name": "triangle",
					"polysynth": {
						"0": true,
					},
					"imag": [0, (1/1), 0, (1/9), 0, (1/25), 0, (1/49), 0, (1/81), 0, (1/121), 0, (1/169), 0, (1/225), 0, (1/289), 0, (1/361), 0, (1/441), 0, (1/529), 0, (1/625), 0, (1/729), 0, (1/841), 0, (1/961), 0],
				},
				"sawtooth": {
					"name": "sawtooth",
					"polysynth": {
						"0": true,
					},
					"imag": [0, (1/1), (1/4), (1/9), (1/16), (1/25), (1/36), (1/49), (1/64), (1/81), (1/100), (1/121), (1/144), (1/169), (1/196), (1/225), (1/256), (1/289), (1/324), (1/361), (1/400), (1/441), (1/484), (1/529), (1/576), (1/625), (1/676), (1/729), (1/784), (1/841), (1/900), (1/961), (1/1024)],
				}
			},
			defaultInstruments: {
				"accordienne": {
					"name":"accordienne",
					"polysynth":{
						"0":true
					},
					"noise":{
						"pink":0.06997558991049634,
						"brown":0.12449145646867371
					},
					"imag":[0,1,0.44293421506881714,0.32471582293510437,0.011000609025359154,0.17021837830543518,0.13372759521007538,0.11268258094787598,0.005569384433329105,0.1067923977971077,0.09378086030483246,0.08295878767967224,0.0006959254387766123,0.05424145981669426,0.0423087477684021,0.05841623246669769,0.023867418989539146,0.04862881824374199,0.046523261815309525,0.016646606847643852,0.04738473519682884,0.012283651158213615,0.021767525002360344,0.04069533571600914,0.01118484791368246,0.029461022466421127,0.024899769574403763,0.006698890123516321,0.01303438562899828,0.030736785382032394,0.002923727734014392,0.01851494237780571,0.020675845444202423],
					"envelope":{
						"attack":0.04006067500076161,
						"decay":0.9215120822558321,
						"sustain":0.5999866460488084,
						"release":0.029129186086711334
					},
					"bitcrusher":{
						"bits":8,
						"norm":0.6084048851693262
					},
					"echo":{
						"delay":0.05,
						"feedback":0.6014353203695686
					}
				},
				"ashbray":{
					"name":"ashbray",
					"polysynth":{
						"0":true
					},
					"noise":{},
					"imag":[0,1,0.949999988079071,0.8999999761581421,0.8500000238418579,0.800000011920929,0.75,0.699999988079071,0.6499999761581421,0.6000000238418579,0.550000011920929,0.5,0.44999998807907104,0.4000000059604645,0.3499999940395355,0.30000001192092896,0.25,0.20000000298023224,0.15000000596046448,0.10000000149011612,0.09000000357627869,0.07999999821186066,0.07000000029802322,0.05999999865889549,0.05000000074505806,0.03999999910593033,0.029999999329447746,0.019999999552965164,0.009999999776482582,0.009999999776482582,0.009999999776482582,0.009999999776482582,0.009999999776482582],
					"envelope":{
						"attack":0.02,
						"decay":0.1,
						"sustain":0.7,
						"release":0.5
					},
					"bitcrusher":{
						"bits":0,
						"norm":0
					},
					"filters":{},
					"echo":{
						"delay":0.02,
						"feedback":0.6
					}
				},
				"bellissful": {
					"name":"bellissful",
					"polysynth":{
						"0":true
					},
					"noise":{},
					"imag":[0,0,0.04104885458946228,0.0010925550013780594,0.051037926226854324,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope":{
						"attack":0.001,
						"decay":1,
						"sustain":0,
						"release":1
					},
					"bitcrusher":{
						"bits":0,
						"norm":0
					},
					"filters":{},
					"echo":{
						"delay":0.025,
						"feedback":0.6
					}
				},
				"bitbottle": {
					"name":"bitbottle",
					"polysynth":{
						"0":true
					},
					"noise":{
						"pink":0.1
					},
					"imag":[0,0.6603714823722839,0.021070703864097595,0.013578898273408413,0.021070703864097595,0.01857343502342701,0.013578898273408413,0.013578898273408413,0.11346964538097382,0.028562510386109352,0.028562510386109352,0.02356797270476818,0.008584360592067242,0.02356797270476818,0.013578898273408413,0.004352819640189409,0.7377867698669434,0.003064535791054368,0.008955108001828194,0.03705715760588646,0.005810053087770939,0.0037432725075632334,0.0017459229566156864,0.021535523235797882,0.028468528762459755,0.034860700368881226,0.004610554315149784,0.018958428874611855,0.0022687807213515043,0.014749004505574703,0.007059432100504637,0.01009814627468586,0.05852973461151123],
					"envelope":{
						"attack":0.1,
						"decay":1,
						"sustain":0,
						"release":1
					},
					"bitcrusher":{
						"bits":0,
						"norm":0
					},
					"filters":{
						"0":{
							"low":2093.004522404789,
							"mid":8372.018089619156,
							"high":20000,
							"type":"highshelf",
							"frequency":2093.004522404789,
							"q":0.4675277938219182,
							"gain":-50
						}
					},
					"echo":{
						"delay":0.028701891715590344,
						"feedback":0.7277977212423912
					}
				},
				"boombash": {
					"name":"boombash",
					"polysynth":{},
					"noise":{
						"brown":1,
						"pink":1
					},
					"imag":[0,0],
					"envelope":{
						"attack":0.001,
						"decay":0.15,
						"sustain":0,
						"release":1
					},
					"bitcrusher":{
						"bits":0,
						"norm":0
					},
					"filters":{
						"0":{
							"low":8.175798915643707,
							"mid":46.24930283895431,
							"high":261.6255653005986,
							"type":"lowshelf",
							"frequency":261.6255653005986,
							"q":0.1824791693384639,
							"gain":25
						},
						"1":{
							"low":1046.5022612023945,
							"mid":4186.009044809578,
							"high":16744.036179238312,
							"type":"highshelf",
							"frequency":1046.5022612023945,
							"q":0.26666666666666666,
							"gain":-10
						},
						"2":{
							"low":65.40639132514966,
							"mid":184.99721135581723,
							"high":523.2511306011972,
							"type":"peaking",
							"frequency":184.99721135581723,
							"q":0.4040610178208844,
							"gain":10
						}
					},
					"echo":{
						"delay":0.035,
						"feedback":0.25
					}
				},
				"bowsaw":{
					"name":"bowsaw",
					"polysynth":{
						"0":true,
						"-12":true
					},
					"noise":{},
					"imag":[0,1,0.23404590785503387,0.15211033821105957,0.142105832695961,0.037102051079273224,0.09601913392543793,0.12448015064001083,0.07319405674934387,0.011639612726867199,0.09405945241451263,0.01200729887932539,0.07927504181861877,0.05457581207156181,0.05331254005432129,0.005395286250859499,0.0026925401762127876,0.027428166940808296,0.04367822781205177,0.04133171588182449,0.045733492821455,0.013625760562717915,0.012657934799790382,0.005503012798726559,0.006074216216802597,0.028866447508335114,0.02051301673054695,0.01495913416147232,0.0029398882761597633,0.004925342742353678,0.020460767671465874,0.012299998663365841,0.02198159135878086],
					"envelope":{
						"attack":0.05,
						"decay":0.19396874983572676,
						"sustain":0.47725710163460633,
						"release":0.5686379494583103
					},
					"bitcrusher":{
						"bits":2,
						"norm":0.5972198769315127
					},
					"filters":{
						"0":{
							"low":1046.9676501513159,
							"mid":4182.288415298123,
							"high":16706.854682863304,
							"type":"highshelf",
							"frequency":1046.9676501513159,
							"q":0.26707015233007286,
							"gain":-18.19511769072885
						},
						"1":{
							"low":16.28629779398394,
							"mid":32.57259558796789,
							"high":65.14519117593582,
							"type":"lowshelf",
							"frequency":65.14519117593582,
							"q":0.6666666666666661,
							"gain":-22.9464168740993
						}
					},
					"echo":{
						"delay":0.017219503353271704,
						"feedback":0.6718588097032427
					},
				},
				"buzzorgan": {
					"name":"buzzorgan",
					"polysynth":{
						"0":true,
						"12":true,
						"-12":true
					},
					"noise":{},
					"imag":[0,1,0.10000000149011612,0,0.009999999776482582,0,0,0,0.0010000000474974513,0,0,0,0,0,0,0,0.00009999999747378752,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000009999999747378752],
					"envelope":{
						"attack":0.23591836734693875,
						"decay":0.9772734693877552,
						"sustain":0.5715527734307078,
						"release":1
					},
					"bitcrusher":{
						"bits":1,
						"norm":0.5
					},
					"filters":{
						"0":{
							"low":8.175798915643707,
							"mid":23.124651419477154,
							"high":65.40639132514966,
							"type":"lowshelf",
							"frequency":65.40639132514966,
							"q":0.4040610178208844,
							"gain":-40
						},
						"1":{
							"low":2093.004522404789,
							"mid":8372.018089619156,
							"high":20000,
							"type":"highshelf",
							"frequency":2093.004522404789,
							"q":0.4675277938219182,
							"gain":-50
						}
					},
					"echo":{
						"delay":0,
						"feedback":0
					}
				},
				"chordstrum": {
					"name":"chordstrum",
					"polysynth":{
						"0":true,
						"-5":true,
						"-12":true
					},
					"noise":{
						"brown":0.08951406649616368
					},
					"imag":[0,1,0.17831625044345856,0.46575266122817993,0.2041115015745163,0.4126817286014557,0.10914841294288635,0.060591064393520355,0.08364199101924896,0.02575693279504776,0.01693502813577652,0.05870021879673004,0.0666189193725586,0.05404908210039139,0.06647317111492157,0.03880130127072334,0.053111664950847626,0.051343005150556564,0,0.0007156424107961357,0.014325405471026897,0.015581578016281128,0.010473430156707764,0,0,0,0,0,0.0028332876972854137,0,0,0,0],
					"envelope":{
						"attack":0.005265295838668044,
						"decay":1,
						"sustain":0,
						"release":1
					},
					"echo":{
						"delay":0.0010553957105702905,
						"feedback":0.8857754774228093
					}
				},
				"clarinaut": {
					"name":"clarinaut",
					"polysynth":{
						"0":true
					},
					"imag":[0,1,0.04185762256383896,0.8109787106513977,0.10051940381526947,0.6024035215377808,0.08422446250915527,0.42967715859413147,0.06467054039239883,0.23087890446186066,0.03859863430261612,0.11029636114835739,0.03859863430261612,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope":{
						"attack":0.05228819184417878,
						"decay":0.14524497734494107,
						"sustain":0.8291752914260813,
						"release":0.08699322990920816
					},
					"filters":{
						"0":{
							"low":18.312373638581303,
							"mid":37.21396757355336,
							"high":75.625334535975,
							"gain":-50
						},
					},
					"echo":{
						"delay":0.04212744274441215,
						"feedback":0.3480771325852489
					}
				},
				"cymbilant": {
					"name":"cymbilant",
					"polysynth":{},
					"noise":{
						"white":0.25,
						"pink":0.25
					},
					"imag":[0,0],
					"envelope":{
						"attack":0.0001,
						"decay":1,
						"sustain":0,
						"release":0
					},
					"bitcrusher":{
						"bits":0,
						"norm":0
					},
					"filters":{
						"0":{
							"low":2093.004522404789,
							"mid":8372.018089619156,
							"high":20000,
							"type":"highshelf",
							"frequency":2093.004522404789,
							"q":0.4675277938219182,
							"gain":10
						},
						"1":{
							"low":8.175798915643707,
							"mid":65.40639132514966,
							"high":523.2511306011972,
							"type":"peaking",
							"frequency":65.40639132514966,
							"q":0.12698412698412698,
							"gain":-10
						},
						"2":{
							"low":523.2511306011972,
							"mid":1479.9776908465378,
							"high":4186.009044809578,
							"type":"peaking",
							"frequency":1479.9776908465378,
							"q":0.4040610178208844,
							"gain":5
						}
					},
					"echo":{
						"delay":0.05,
						"feedback":0.5
					}
				},
				"darkflute": {
					"name":"darkflute",
					"polysynth":{
						"0":true,
						"7":true
					},
					"noise":{
						"white":0.1
					},
					"imag":[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope":{
						"attack":0.9681919358212048,
						"decay":0.9372387264087787,
						"sustain":0.8797216541216758,
						"release":0.3691070734990474
					},
					"filters":{
						"0":{
							"low":4861.69725806286,
							"mid":8906.515668158989,
							"high":16316.528392549255,
							"gain":-43.064876957494405
						}
					},
					"echo":{
						"delay":0.4607913227432864,
						"feedback":0.4463562957226408
					}
				},
				"ensnarl":{
					"name":"ensnarl",
					"polysynth":{},
					"noise":{
						"pink":0.5,
						"white":1,
						"brown":0.5
					},
					"imag":[0,0],
					"envelope":{
						"attack":0.005,
						"decay":0.125,
						"sustain":0,
						"release":1
					},
					"bitcrusher":{
						"bits":0,
						"norm":0
					},
					"filters":{
						"0":{
							"low":130.8127826502993,
							"mid":261.6255653005986,
							"high":523.2511306011972,
							"type":"peaking",
							"frequency":261.6255653005986,
							"q":0.6666666666666666,
							"gain":20
						},
						"1":{
							"low":8.175798915643707,
							"mid":46.24930283895431,
							"high":261.6255653005986,
							"type":"lowshelf",
							"frequency":261.6255653005986,
							"q":0.1824791693384639,
							"gain":10
						},
						"2":{
							"low":1046.5022612023945,
							"mid":4186.009044809578,
							"high":16744.036179238312,
							"type":"highshelf",
							"frequency":1046.5022612023945,
							"q":0.26666666666666666,
							"gain":-10
						}
					},
					"echo":{
						"delay":0.03,
						"feedback":0.2
					}
				},
				"fuzzillade": {
					"name":"fuzzillade",
					"polysynth": {
						"0":true,
						"-12":true
					},
					"noise":{
						"white":0.1,
						"brown":0.1,
					},
					"imag":[0,1,0.2721260190010071,0.1634569764137268,0.20843380689620972,0.17615669965744019,0.038680654019117355,0.08300412446260452,0.0912071168422699,0.05134723335504532,0.03261181712150574,0.006951713934540749,0.06389429420232773,0.02962232194840908,0.01340870838612318,0.020696712657809258,0.017252037301659584,0.032719820737838745,0.016309291124343872,0.03520479425787926,0.028209438547492027,0.03530978783965111,0.0028287721797823906,0.04293005168437958,0.013352521695196629,0.002816961845383048,0.014206286519765854,0.017066607251763344,0.022002283483743668,0.010360535234212875,0.023887373507022858,0.03119545988738537,0.01103762537240982],
					"envelope":{
						"attack":0.04,
						"decay":0.05,
						"sustain":0.5547617247616123,
						"release":0.7796304747231637
					},
					"bitcrusher":{
						"bits":4,
						"norm":0.2
					},
					"filters":{
						"0":{
							"low":16.351597831287414,
							"mid":46.208168929038116,
							"high":130.58019759322892,
							"type":"lowshelf",
							"frequency":130.58019759322892,
							"q":0.4045236396606315,
							"gain":10
						},
						"1":{
							"low":1047.4338438800266,
							"mid":4187.871795707915,
							"high":16744.036179238312,
							"type":"highshelf",
							"frequency":1047.4338438800266,
							"q":0.26680116538814797,
							"gain":-15.98113016788475
						}
					},
					"echo":{
						"delay":0.028701891715590344,
						"feedback":0.4805169030357534
					}
				},
				"glassical": {
					"name":"glassical",
					"polysynth":{
						"0":true,
						"-12":true
					},
					"noise":{
						"brown":0.055284552845528454
					},
					"imag":[0,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
					"envelope":{
						"attack":0.007199265381083561,
						"decay":0.8632627074186466,
						"sustain":0,
						"release":1
					},
					"bitcrusher":{
						"bits":8,
						"norm":0.987639993997258
					},
					"filters":{
						"0":{
							"low":2646.268164573106,
							"mid":10548.081821211836,
							"high":20000,
							"gain":-23.210589388822314
						}
					},
					"echo":{
						"delay":0.08495044767097758,
						"feedback":0.8535788212223554
					}
				},
				"hermanico": {
					"name":"hermanico",
					"polysynth":{
						"12":true
					},
					"noise":{
						"pink":0.1,"brown":0.2
					},
					"imag":[0,0.8825923204421997,0.05503871291875839,0.24861495196819305,0.016217639669775963,0.1394181102514267,0.08311229944229126,0.1344422698020935,0.0980064645409584,0.04095985367894173,0.0821826159954071,0.05785004794597626,0.06559411436319351,0.06909625977277756,0.006454214453697205,0.03660145029425621,0.04250609874725342,0.045627348124980927,0.02087404392659664,0.014729636721313,0.04205738380551338,0.002473647240549326,0.010658258572220802,0.033695682883262634,0.03393666073679924,0.020598161965608597,0.028835810720920563,0.03316494822502136,0.02083248272538185,0.006201272830367088,0.0308681707829237,0.0003706399875227362,0.019239867106080055],
					"envelope":{
						"attack":0.04,
						"decay":0.10313497708060669,
						"sustain":0.5059240056019745,
						"release":0.18518241706511507
					},
					"bitcrusher":{
						"bits":0,
						"norm":0
					},
					"filters":{
						"0":{
							"low":489.83850206221183,
							"mid":920.7448276571835,
							"high":1730.7153971938808,
							"type":"peaking",
							"frequency":920.7448276571835,
							"q":0.7420114205281286,
							"gain":-18.63681506705982
						}
					},
					"echo":{
						"delay":0.020208604954367666,
						"feedback":0.281792412534462
					}
				},
				"honeyharp": {
					"name": "honeyharp",
					"polysynth":{
						"0":true
					},
					"noise":{
						"brown":0.07771135781383433
					},
					"imag":[0,1,0,0.2178429514169693,0,0.14940421283245087,0,0.1158275306224823,0.3807923495769501,0.08310726284980774,0.0001470343122491613,0.05094950646162033,0,0.012528758496046066,0,0.030789503827691078,0,0.036400504410266876,0.0427282489836216,0.0037623702082782984,0.007912619970738888,0.0005064468132331967,0,0.003089423757046461,0,0.014406030997633934,0.019122179597616196,0.03117973357439041,0.00888627115637064,0.03448168560862541,0.0077970088459551334,0.029125453904271126,0.022520482540130615],
					"envelope":{
						"attack":0.008811254291446448,
						"decay":1,
						"sustain":0,
						"release":1
					},
					"filters":{
						"1":{
							"low":822.8462713537634,
							"mid":8221.107072310962,
							"high":20000,
							"gain":-25
						},
						"2":{
							"low":2390.278220900194,
							"mid":10548.081821211836,
							"high":20000,
							"gain":-25
						}
					},
					"echo":{
						"delay":0.00835524908457173,
						"feedback":0.7594509205795837
					}
				},
				"jangle": {
					"name":"jangle",
					"polysynth": {
						"0":true,
						"12":true,
						"-12":true
					},
					"imag":[0,1,0,0,0,0,0,0,0.46878501772880554,0,0,0,0,0,0,0,0.341684490442276,0,0,0,0,0,0,0,0.09400142729282379,0,0,0,0,0,0,0,0.21132497489452362],
					"envelope":{
						"attack":0.0024277414605824318,
						"decay":0.2568350031240243,
						"sustain":0,
						"release":0.870276277426606
					},
					"filters":{
						"0":{
							"low":9.92437152514077,
							"mid":32.91541662897909,
							"high":109.16808677654838,
							"gain":-20.072992700729927
						}
					},
					"echo":{
						"delay":0.07412233349465767,
						"feedback":0.6897265497330863
					}
				},
				"jellybanjo": {
					"name":"jellybanjo",
					"polysynth":{
						"0":true
					},
					"noise":{},
					"imag":[0,1,0.9577524662017822,0.8558614253997803,0.4383566975593567,0.4085349142551422,0.376228004693985,0.1674756407737732,0.14759445190429688,0.13516871631145477,0.05564400181174278,0.04570341482758522,0,0.04570341482758522,0,0.015881644561886787,0,0.02333708666265011,0,0.03576282411813736,0,0.013396497815847397,0,0.013396497815847397,0,0.013396497815847397,0,0.008426202461123466,0,0.018366791307926178,0,0.010911350138485432,0],
					"envelope":{
						"attack":0.005,
						"decay":1,
						"sustain":0,
						"release":0
					},
					"bitcrusher":{
						"bits":0,
						"norm":0
					},
					"filters":{},
					"echo":{
						"delay":0.02,
						"feedback":0.5
					}
				},
				"keystone": {
					"name":"keystone",
					"polysynth":{
						"0":true
					},
					"noise":{},
					"imag":[0,0.20000000298023224,1,0.029999999329447746,0.05000000074505806,0.02356797270476818,0.021070703864097595,0.038551583886146545,0.019999999552965164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope":{
						"attack":0.005,
						"decay":1,
						"sustain":0.01,
						"release":1
					},
					"bitcrusher":{
						"bits":0,
						"norm":0
					},
					"filters":{
						"0":{
							"low":1046.5022612023945,
							"mid":4186.009044809578,
							"high":16744.036179238312,
							"type":"highshelf",
							"frequency":1046.5022612023945,
							"q":0.26666666666666666,
							"gain":-2
						},
						"1":{
							"low":8.175798915643707,
							"mid":23.124651419477154,
							"high":65.40639132514966,
							"type":"lowshelf",
							"frequency":65.40639132514966,
							"q":0.4040610178208844,
							"gain":-10
						},
						"2":{
							"low":8.175798915643707,
							"mid":16.351597831287414,
							"high":32.70319566257483,
							"type":"lowshelf",
							"frequency":32.70319566257483,
							"q":0.6666666666666666,
							"gain":-20
						},
						"3":{
							"low":8372.018089619156,
							"mid":16744.036179238312,
							"high":20000,
							"type":"highshelf",
							"frequency":8372.018089619156,
							"q":1.4399778317757896,
							"gain":-30
						}
					},
					"echo":{
						"delay":0.04,
						"feedback":0.2
					}
				},
				"lazerz": {
					"name": "lazerz",
					"polysynth":{
						"0":true
					},
					"imag":[0,1,0.43981871008872986,0.19477427005767822,0.16363249719142914,0.04059608280658722,0.05547327548265457,0.08984045684337616,0.02408204786479473,0.05339190736413002,0.0810762494802475,0.049579720944166183,0.004129277542233467,0.06980492174625397,0.011852550320327282,0.011417913250625134,0.05199107900261879,0.0462377704679966,0.011805979534983635,0.041976239532232285,0.04228879511356354,0.03486672788858414,0.03639288619160652,0.005501041188836098,0.018338866531848907,0.004767595790326595,0.02615637518465519,0.016462303698062897,0.018449874594807625,0.03333821892738342,0.03183285519480705,0.022049419581890106,0.020332850515842438],
					"envelope":{
						"attack":0.0103,
						"decay":0.6066113351908449,
						"sustain":0.2795546993048945,
						"release":0.2983127072001239
					},
					"filters":{
						"0":{
							"low":42.73771657635709,
							"mid":74.15621598227193,
							"high":128.6719274995506,
							"gain":19.39672225311667
						},
						"1":{
							"low":2236.228485250351,
							"mid":3672.0056804902356,
							"high":6029.627923303666,
							"gain":-14.155259381494123
						}
					},
					"bitcrusher":{
						"bits":1,
						"norm":0.9476107287222466
					},
					"echo":{
						"delay":0.05,
						"feedback":0.2748267474475922
					}
				},
				"mayrimba": {
					"name":"mayrimba",
					"polysynth":{
						"0":true
					},
					"noise":{},
					"imag":[0,1,0.06102700158953667,0.0010925550013780594,0.1684095561504364,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope":{
						"attack":0.001,
						"decay":1,
						"sustain":0,
						"release":1
					},
					"bitcrusher":{
						"bits":0,
						"norm":0
					},
					"filters":{},
					"echo":{
						"delay":0.03,
						"feedback":0.6
					}
				},
				"meltmallet": {
					"name":"meltmallet",
					"polysynth":{
						"0":true
					},
					"noise":{},
					"imag":[0,0,1,0,0.6528796553611755,0,0,0,0.18089589476585388,0,0.0001470343122491613,0.05094950646162033,0,0.012528758496046066,0,0.030789503827691078,0.15092867612838745,0.036400504410266876,0.0427282489836216,0.0037623702082782984,0.007912619970738888,0.0005064468132331967,0,0.003089423757046461,0,0.014406030997633934,0.019122179597616196,0.03117973357439041,0.00888627115637064,0.03448168560862541,0.0077970088459551334,0.029125453904271126,0.08599968999624252],
					"envelope":{
						"attack":0.001,
						"decay":1,
						"sustain":0,
						"release":0
					},
					"bitcrusher":{
						"bits":0,
						"norm":0
					},
					"filters":{
						"0":{
							"low":2093.004522404789,
							"mid":5919.910763386151,
							"high":16744.036179238312,
							"type":"highshelf",
							"frequency":2093.004522404789,
							"q":0.4040610178208844,
							"gain":-40
						},
						"1":{
							"low":16.351597831287414,
							"mid":32.70319566257483,
							"high":65.40639132514966,
							"type":"lowshelf",
							"frequency":65.40639132514966,
							"q":0.6666666666666666,
							"gain":-10
						}
					},
					"echo":{
						"delay":0.02,
						"feedback":0.7
					}
				},
				"mockarina": {
					"name":"mockarina",
					"polysynth":{
						"12":true
					},
					"noise":{
						"pink":0.01
					},
					"imag":[0,0.5,0.75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope":{
						"attack":0.07,
						"decay":0.3,
						"sustain":0.75,
						"release":0.3
					},
					"bitcrusher":{
						"bits":0,
						"norm":0
					},
					"filters":{
						"0":{
							"low":8.175798915643707,
							"mid":46.24930283895431,
							"high":261.6255653005986,
							"type":"lowshelf",
							"frequency":261.6255653005986,
							"q":0.1824791693384639,
							"gain":-30
						},
						"1":{
							"low":8372.018089619156,
							"mid":16744.036179238312,
							"high":20000,
							"type":"highshelf",
							"frequency":8372.018089619156,
							"q":1.4399778317757896,
							"gain":-10
						}
					},
					"echo":{
						"delay":0.03,
						"feedback":0.7
					}
				},
				"nimbusnotes": {
					"name": "nimbusnotes",
					"polysynth": {
						"0":true
					},
					"noise":{},
					"imag":[0,1],
					"envelope":{
						"attack":0.005,
						"decay":1,
						"sustain":0,
						"release":0
					},
					"bitcrusher":{
						"bits":0,
						"norm":0
					},
					"filters":{},
					"echo":{
						"delay":0,
						"feedback":0
					}
				},
				"particcolo":{
					"name":"particcolo",
					"polysynth":{
						"0":true
					},
					"noise":{
						"pink":0.01,
						"brown":0.01
					},
					"imag":[0,0,0.75,0.0010925550013780594,0.21336038707663494,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope":{
						"attack":0.08,
						"decay":0.3,
						"sustain":0.8,
						"release":0.5
					},
					"bitcrusher":{
						"bits":0,
						"norm":0
					},
					"filters":{
						"0":{
							"low":4186.009044809578,
							"mid":11839.821526772303,
							"high":20000,
							"type":"highshelf",
							"frequency":4186.009044809578,
							"q":0.7486928227239356,
							"gain":5
						}
					},
					"echo":{
						"delay":0.03,
						"feedback":0.4
					}
				},
				"pipepad": {
					"name":"pipepad",
					"polysynth": {
						"0":true,
						"12":true
					},
					"noise":{},
					"imag":[0,0.33562183380126953,0.6109020113945007,0.1744801104068756,0.09404638409614563,0.07281248271465302,0.0915573388338089,0.02150915376842022,0.0853821188211441,0.10350412130355835,0.07266827672719955,0.08902092278003693,0.43355804681777954,0.0031595886684954166,0.05492638051509857,0.009794807061553001,0.053827643394470215,0.04052245244383812,0.0023047751747071743,0.009134497493505478,0.003136951941996813,0.040616050362586975,0.015174685046076775,0.015443396754562855,0.036237023770809174,0.0044108182191848755,0.004686694126576185,0.004756764974445105,0.010029036551713943,0.003516408847644925,0.026952527463436127,0.01701277121901512,0.02771703340113163],
					"envelope":{
						"attack":0.05,
						"decay":0.01,
						"sustain":0.65,
						"release":0.6
					},
					"bitcrusher":{
						"bits":0,
						"norm":0
					},
					"filters":{
						"0":{
							"low":32.70319566257483,
							"mid":65.40639132514966,
							"high":130.8127826502993,
							"type":"peaking",
							"frequency":65.40639132514966,
							"q":0.6666666666666666,
							"gain":-15
						},
						"1":{
							"low":2093.004522404789,
							"mid":5919.910763386151,
							"high":16744.036179238312,
							"type":"highshelf",
							"frequency":2093.004522404789,
							"q":0.4040610178208844,
							"gain":-25
						}
					},
					"echo":{
						"delay":0.1,
						"feedback":0.2
					}
				},
				"qube": {
					"name":"qube",
					"polysynth":{
						"0":true,
						"12":true
					},
					"imag":[0,1,0,0.1111111119389534,0,0.03999999910593033,0,0.020408162847161293,0,0.012345679104328156,0,0.00826446246355772,0,0.005917159840464592,0,0.004444444552063942,0,0.0034602077212184668,0,0.002770083025097847,0,0.0022675737272948027,0,0.0018903592135757208,0,0.0015999999595806003,0,0.0013717421097680926,0,0.0011890606256201863,0,0.0010405827779322863,0],
					"envelope":{
						"attack":0.01061524334251607,
						"decay":0.11725436179981635,
						"sustain":0.4491774703126702,
						"release":0.22923783287419647
					},
					"bitcrusher":{
						"bits":8,
						"norm":1
					},
					"echo":{
						"delay":0.00032741056024983945,
						"feedback":0.3829393180084976
					}
				},
				"randolin": {
					"name":"randolin",
					"polysynth": {
						"0":true
					},
					"noise":{},
					"imag":[0,1,0.16875877976417542,0.07101190835237503,0.13254764676094055,0.11018283665180206,0.05039362609386444,0.056428223848342896,0.1020343154668808,0.10569997876882553,0.08224548399448395,0.030915070325136185,0.0723150372505188,0.0027549313381314278,0.013039435259997845,0.003925666678696871,0.004136265721172094,0.0042406534776091576,0.0008384122047573328,0.010557533241808414,0.03953870013356209,0.03006448782980442,0.02172408439218998,0.007239776663482189,0.004996773321181536,0.02772033028304577,0.00030931454966776073,0.01587240770459175,0.006464128848165274,0.02789974771440029,0.00049134052824229,0.025921806693077087,0.01809745840728283],
					"envelope":{
						"attack":0.01336064807804993,
						"decay":1,
						"sustain":0,
						"release":0
					},
					"bitcrusher":{
						"bits":0,
						"norm":0
					},
					"filters":{},
					"echo":{
						"delay":0.01886847063108421,
						"feedback":0.30896902265439863
					}
				},
				"reedles": {
					"name": "reedles",
					"polysynth":{
						"0":true
					},
					"imag":[0,1,0.13321591913700104,0.23890696465969086,0.1848037987947464,0.06213591620326042,0.15851031243801117,0.013016369193792343,0.05386565998196602,0.11070278286933899,0.046062078326940536,0.05860947445034981,0.07818899303674698,0.017279257997870445,0.02893548458814621,0.019652292132377625,0.006511820014566183,0.026842080056667328,0.029128052294254303,0.04828658327460289,0.026606278494000435,0.043067075312137604,0.02284008078277111,0.03200739622116089,0.038210369646549225,0.03194240480661392,0.007605026010423899,0.011232322081923485,0.02774462290108204,0.0024622941855341196,0.016160927712917328,0.026034902781248093,0.0009380421251989901],
					"envelope":{
						"attack":0.036862935925353835,
						"decay":0.18700753813155746,
						"sustain":0.730133889758303,
						"release":0.16572433174364076
					},
					"filters":{
						"0":{
							"low":17.00523847135155,
							"mid":34.791076828746036,
							"high":71.1791856928607,
							"gain":10
						},
						"1":{
							"low":4556.987960311114,
							"mid":9167.496497936349,
							"high":18442.662735044294,
							"gain":-22.335246044166226
						}
					},
					"bitcrusher":{
						"bits":8,
						"norm":0.9295249065172435
					},
					"echo":{
						"delay":0.04787234042553192,
						"feedback":0.16714675029034326
					}
				},
				"reverbassoon": {
					"name":"reverbassoon",
					"polysynth":{
						"-12":true
					},
					"noise":{
						"pink":0.1
					},
					"imag":[0,0.9051038026809692,0.24841533601284027,0.29958122968673706,0.20493479073047638,0.3503422439098358,0.44310909509658813,0.3976353406906128,0.7752458453178406,0.6528796553611755,0.6154206395149231,0.36029869318008423,0.2233976423740387,0.1586807668209076,0.07069320231676102,0.004352819640189409,0.009285477921366692,0.003064535791054368,0.008955108001828194,0.03705715760588646,0.005810053087770939,0.0037432725075632334,0.0017459229566156864,0.021535523235797882,0.028468528762459755,0.034860700368881226,0.004610554315149784,0.018958428874611855,0.0022687807213515043,0.014749004505574703,0.007059432100504637,0.01009814627468586,0.01717371866106987],
					"envelope":{
						"attack":0.06851366561192636,
						"decay":0.11884578994122286,
						"sustain":0.1435082459058059,
						"release":0.38568980002281045
					},
					"bitcrusher":{
						"bits":0,
						"norm":0
					},
					"filters":{
						"0":{
							"low":2089.283161491664,
							"mid":5914.6456229168825,
							"high":16744.036179238312,
							"type":"highshelf",
							"frequency":2089.283161491664,
							"q":0.40359913372503453,
							"gain":-24.512441156691324
						}
					},
					"echo":{
						"delay":0.028701891715590344,
						"feedback":0.7775590316733918
					}
				},
				"sharpsichord": {
					"name":"sharpsichord",
					"polysynth":{
						"0":true
					},
					"imag":[0,1,0.18338973820209503,0.06164489686489105,0.16505765914916992,0.05308644846081734,0.0630641058087349,0.03404829651117325,0.05037868767976761,0.09803289920091629,0.04073476791381836,0.06083011254668236,0.027402449399232864,0.008078854531049728,0.0028261858969926834,0.04333797097206116,0.04956173896789551,0.033073946833610535,0.028376849368214607,0.022788777947425842,0.011428376659750938,0.02052171155810356,0.005210720002651215,0.0385330505669117,0.03903305158019066,0.011357864364981651,0.025470439344644547,0.0014464398846030235,0.018127329647541046,0.01408306136727333,0.013367714360356331,0.0005558114498853683,0.015808377414941788],
					"envelope":{
						"attack":0.0010819334770028426,
						"decay":0.3011093120255117,
						"sustain":0,
						"release":0.8948628416772253
					},
					"bitcrusher":{
						"bits":16,
						"norm":0.25
					},
					"filters":{
						"0":{
							"low":3223.3996504974443,
							"mid":8543.374424708145,
							"high":20000,
							"gain":10.024587985114302
						},
						"1":{
							"low":11.98732795784056,
							"mid":32.70319566257483,
							"high":89.21913292988074,
							"gain":-22.936602870813402
						}
					},
					"echo":{
						"delay":0.13033631290023645,
						"feedback":0.3335722262314059
					}
				},
				"shimmer": {
					"name": "shimmer",
					"polysynth": {
						"0": true,
						"12": true
					},
					"imag": [0, (1/1), 0, (1/3), 0, (1/5), 0, (1/7), 0, (1/9), 0, (1/11), 0, (1/13), 0, (1/15), 0, (1/17), 0, (1/19), 0, (1/21), 0, (1/23), 0, (1/25), 0, (1/27), 0, (1/29), 0, (1/31), 0],
					"noise": {
						"white": 0.2,
					},
					"envelope": {
						"attack": 0.01,
						"decay": 0.6,
						"sustain": 0,
						"release": 0
					},
					"bitcrusher": {
						"bits": 64,
						"norm": 0.5
					},
					"echo": {
						"delay": 0.08,
						"feedback": 0.7
					},
					"filters": {
						"0": {
							"low":  3.2445679498433218,
							"mid":  32.70319566257483,
							"high": 329.6275569128699,
							"gain": -10
						},
						"1": {
							"low":  1046.5022612023945,
							"mid":  10548.081821211836,
							"high": 106318.00258046597,
							"gain": -20
						}
					}
				},
				"snacksifolk": {
					"name":"snacksifolk",
					"polysynth":{
						"0":true
					},
					"noise":{
						"brown":0.1
					},
					"imag":[0,1,0.2721260190010071,0.1634569764137268,0.20843380689620972,0.17615669965744019,0.038680654019117355,0.08300412446260452,0.0912071168422699,0.05134723335504532,0.03261181712150574,0.006951713934540749,0.06389429420232773,0.02962232194840908,0.01340870838612318,0.020696712657809258,0.017252037301659584,0.032719820737838745,0.016309291124343872,0.03520479425787926,0.028209438547492027,0.03530978783965111,0.0028287721797823906,0.04293005168437958,0.013352521695196629,0.002816961845383048,0.014206286519765854,0.017066607251763344,0.022002283483743668,0.010360535234212875,0.023887373507022858,0.03119545988738537,0.01103762537240982],
					"envelope":{
						"attack":0.035,
						"decay":0.05,
						"sustain":0.5547617247616123,
						"release":0.7796304747231637
					},
					"bitcrusher":{
						"bits":0,
						"norm":1
					},
					"filters":{
						"0":{
							"low":15.676117886588871,
							"mid":45.31416586706765,
							"high":130.98738112864083,
							"type":"lowshelf",
							"frequency":130.98738112864083,
							"q":0.3929725908209666,
							"gain":10.25678680820711
						},
						"1":{
							"low":2081.867406910767,
							"mid":5904.139495446471,
							"high":16744.036179238312,
							"type":"highshelf",
							"frequency":2081.867406910767,
							"q":0.40267845685895887,
							"gain":-14.716989048797885
						}
					},
					"echo":{
						"delay":0.00651890482398957,
						"feedback":0.4805169030357534
					}
				},
				"spritzicato": {
					"name":"spritzicato",
					"polysynth":{
						"0":true,
						"12":true
					},
					"noise":{
						"pink":0.05
					},
					"imag":[0,0.8874203562736511,0.1295931190252304,0.20315755903720856,0.16292069852352142,0.10984145849943161,0.11577275395393372,0.0980217382311821,0.04745087772607803,0.05612877011299133,0.04626862332224846,0.01921742409467697,0.0671650618314743,0.04446854442358017,0.011415340937674046,0.06422305852174759,0.043835777789354324,0.04096030443906784,0.04101203382015228,0.048137012869119644,0.037398431450128555,0.03662402555346489,0.01821613870561123,0.04218064993619919,0.008371297270059586,0.007837610319256783,0.018631432205438614,0.03486699238419533,0.01330649759620428,0.014677741564810276,0.02004636451601982,0.01507441233843565,0.026194047182798386],
					"envelope":{
						"attack":0.005,
						"decay":0.15,
						"sustain":0,
						"release":1
					},
					"bitcrusher":{
						"bits":0,
						"norm":0
					},
					"filters":{
						"0":{
							"low":1046.5022612023945,
							"mid":2959.9553816930757,
							"high":8372.018089619156,
							"type":"peaking",
							"frequency":2959.9553816930757,
							"q":0.4040610178208844,
							"gain":-25
						},
						"1":{
							"low":261.6255653005986,
							"mid":739.9888454232689,
							"high":2093.004522404789,
							"type":"peaking",
							"frequency":739.9888454232689,
							"q":0.4040610178208844,
							"gain":-10
						},
						"2":{
							"low":4186.009044809578,
							"mid":11839.821526772303,
							"high":20000,
							"type":"highshelf",
							"frequency":4186.009044809578,
							"q":0.7486928227239356,
							"gain":-40
						}
					},
					"echo":{
						"delay":0.03,
						"feedback":0.5
					}
				},
				"swello": {
					"name":"swello",
					"polysynth":{
						"-12":true
					},
					"noise":{
						"brown":0.1
					},
					"imag":[0,1,0.3432779610157013,0.2315126657485962,0.058497168123722076,0.1899126172065735,0.0448404885828495,0.12938399612903595,0.07931369543075562,0.054060198366642,0.0988508090376854,0.0522669218480587,0.056811220943927765,0.051076728850603104,0.032383546233177185,0.004351383075118065,0.04818083345890045,0.038509003818035126,0.014789948239922523,0.006924794986844063,0.034774232655763626,0.009429270401597023,0.003623893717303872,0.0258589219301939,0.0015618279576301575,0.022793792188167572,0.01324266754090786,0.007655204273760319,0.0041127512231469154,0.022874318063259125,0.016309715807437897,0.008302805945277214,0.008340908214449883],
					"envelope":{
						"attack":0.2,
						"decay":0.4,
						"sustain":0.6,
						"release":0.8
					},
					"echo":{
						"delay":0.009965899510513269,
						"feedback":0.7489922649526092
					}
				},
				"trombus": {
					"name":"trombus",
					"polysynth":{
						"0":true
					},
					"noise":{
						"brown":0.01
					},
					"imag":[0,1,0.4980490207672119,0.24832214415073395,0.11846417933702469,0.05852973461151123,0.02356797270476818,0.011081629432737827,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope":{
						"attack":0.0764509758117607,
						"decay":0.11008940516893541,
						"sustain":0.920087404401436,
						"release":0.352299687825182
					},
					"bitcrusher":{
						"bits":0,
						"norm":0
					},
					"filters":{
						"0":{
							"low":2076.045897957098,
							"mid":5948.878373921389,
							"high":17046.42173014274,
							"type":"highshelf",
							"frequency":2076.045897957098,
							"q":0.3973766885084851,
							"gain":5.188122152859798
						},
						"1":{
							"low":14.879039355946865,
							"mid":59.710151101422674,
							"high":239.61910841574203,
							"type":"lowshelf",
							"frequency":239.61910841574203,
							"q":0.26568538201141145,
							"gain":-8.849333558292557
						}
					},
					"echo":{
						"delay":0.03076923076923077,
						"feedback":0.4031528016232246
					}
				},
				"underseep": {
					"name": "underseep",
					"polysynth":{
						"0":true,
						"12":true
					},
					"noise":{},
					"imag":[0,1,0.3213120102882385,0.2774433195590973,0.011021449230611324,0.01404001284390688,0.0006878199055790901,0.03247099369764328,0.03869893401861191,0.09622026234865189,0.0321379154920578,0.06449630111455917,0.02757621556520462,0.02349603734910488,0.03819667175412178,0.055925361812114716,0.031162837520241737,0.0023747377563267946,0.0011247359216213226,0.026810549199581146,0.033752020448446274,0.009248711168766022,0.031557273119688034,0.032972175627946854,0.03257177025079727,0.026090048253536224,0.013911527581512928,0.01111803948879242,0.001483236439526081,0.018287574872374535,0.021726204082369804,0.026707740500569344,0.021846726536750793],
					"envelope":{
						"attack":0.005,
						"decay":0.15,
						"sustain":0,
						"release":0.75
					},
					"bitcrusher":{
						"bits":0,
						"norm":0
					},
					"filters":{
						"0":{
							"low":2093.004522404789,
							"mid":8372.018089619156,
							"high":20000,
							"type":"highshelf",
							"frequency":2093.004522404789,
							"q":0.4675277938219182,
							"gain":-30
						}
					},
					"echo":{
						"delay":0.05,
						"feedback":0.8
					}
				},
				"voxelle":{
					"name":"voxelle",
					"polysynth":{
						"0":true
					},
					"noise":{
						"pink":0.1,
						"brown":0.1,
						"white":0.05
					},
					"imag":[0,1,1,0.5080381035804749,0.2533166706562042,0.08849695324897766,0.04854065924882889,0.03605431690812111,0.02356797270476818,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope":{
						"attack":0.03,
						"decay":0.5,
						"sustain":0.8,
						"release":1
					},
					"bitcrusher":{
						"bits":0,
						"norm":0
					},
					"filters":{
						"0":{
							"low":1046.5022612023945,
							"mid":4186.009044809578,
							"high":16744.036179238312,
							"type":"highshelf",
							"frequency":1046.5022612023945,
							"q":0.26666666666666666,
							"gain":-30
						}
					},
					"echo":{
						"delay":0.01,
						"feedback":0.7
					}
				},
				"vyol": {
					"name":"vyol",
					"polysynth":{
						"12":true
					},
					"noise":{
						"pink":0.05
					},
					"imag":[0,0.8874203562736511,0.1295931190252304,0.20315755903720856,0.16292069852352142,0.10984145849943161,0.11577275395393372,0.0980217382311821,0.04745087772607803,0.05612877011299133,0.04626862332224846,0.01921742409467697,0.0671650618314743,0.04446854442358017,0.011415340937674046,0.06422305852174759,0.043835777789354324,0.04096030443906784,0.04101203382015228,0.048137012869119644,0.037398431450128555,0.03662402555346489,0.01821613870561123,0.04218064993619919,0.008371297270059586,0.007837610319256783,0.018631432205438614,0.03486699238419533,0.01330649759620428,0.014677741564810276,0.02004636451601982,0.01507441233843565,0.026194047182798386],
					"envelope":{
						"attack":0.2,
						"decay":0.6,
						"sustain":0.5,
						"release":0.6
					},
					"bitcrusher":{
						"bits":0,
						"norm":0
					},
					"filters":{
						"0":{
							"low":4143.198440031739,
							"mid":11857.221458531772,
							"high":20000,
							"type":"highshelf",
							"frequency":4143.198440031739,
							"q":0.747768799003341,
							"gain":-9.883355011958209
						}
					},
					"echo":{
						"delay":0.02,
						"feedback":0.5
					}
				},
				"zipboard": {
					"name":"zipboard",
					"polysynth": {
						"0":true,
						"12":true
					},
					"noise":{},
					"imag":[0,1,0.2469734251499176,0.002976407762616873,0.16500729322433472,0.1631493717432022,0.006283351685851812,0.06217874214053154,0.12171376496553421,0.005290979985147715,0.078001968562603,0.06913785636425018,0.00888859387487173,0.00039055573870427907,0.05901888385415077,0.054893858730793,0.01904197968542576,0.0032623414881527424,0.03901148959994316,0.02713780105113983,0.035767827183008194,0.018263455480337143,0.016943002119660378,0.004188771825283766,0.01903744600713253,0.01300036534667015,0.021625585854053497,0.010731637477874756,0.020787563174962997,0.020557072013616562,0.0007718194392509758,0.0048711118288338184,0.017420852556824684],
					"envelope":{
						"attack":0.009410607540294214,
						"decay":0.44725215499143944,
						"sustain":0.401,
						"release":0.08178365890825967
					},
					"bitcrusher":{
						"bits":0,
						"norm":0
					},
					"filters":{
						"0":{
							"low":34.125975815066454,
							"mid":65.66928214169573,
							"high":126.36868291694998,
							"type":"peaking",
							"frequency":65.66928214169573,
							"q":0.7119184183218189,
							"gain":-6.144721203974623
						},
						"1":{
							"low":2030.360059499887,
							"mid":3919.369788449322,
							"high":7565.879493508692,
							"type":"peaking",
							"frequency":3919.369788449322,
							"q":0.7080401099072517,
							"gain":-17.696246580186724
						}
					},
					"echo":{
						"delay":0.15,
						"feedback":0.25
					}
				},
				"ziplimba": {
					"name":"ziplimba",
					"polysynth": {
						"0":true,
						"12":true
					},
					"noise":{},
					"imag":[0,1,0.2469734251499176,0.002976407762616873,0.16500729322433472,0.1631493717432022,0.006283351685851812,0.06217874214053154,0.12171376496553421,0.005290979985147715,0.078001968562603,0.06913785636425018,0.00888859387487173,0.00039055573870427907,0.05901888385415077,0.054893858730793,0.01904197968542576,0.0032623414881527424,0.03901148959994316,0.02713780105113983,0.035767827183008194,0.018263455480337143,0.016943002119660378,0.004188771825283766,0.01903744600713253,0.01300036534667015,0.021625585854053497,0.010731637477874756,0.020787563174962997,0.020557072013616562,0.0007718194392509758,0.0048711118288338184,0.017420852556824684],
					"envelope":{
						"attack":0.005,
						"decay":0.44725215499143944,
						"sustain":0,
						"release":0.2
					},
					"bitcrusher":{
						"bits":0,
						"norm":0
					},
					"filters":{
						"0":{
							"low":34.125975815066454,
							"mid":65.66928214169573,
							"high":126.36868291694998,
							"type":"peaking",
							"frequency":65.66928214169573,
							"q":0.7119184183218189,
							"gain":-6.144721203974623
						},
						"1":{
							"low":2030.360059499887,
							"mid":3919.369788449322,
							"high":7565.879493508692,
							"type":"peaking",
							"frequency":3919.369788449322,
							"q":0.7080401099072517,
							"gain":-17.696246580186724
						}
					},
					"echo":{
						"delay":0.15,
						"feedback":0.25
					}
				}
			}
		}
		window.AUDIO_J = AUDIO_J

/*** helpers ***/
	/* getNote */
		AUDIO_J.getNote = getNote
		function getNote(midi) {
			try {
				// no midi or invalid
					if (!midi || isNaN(midi) || Number(midi % 1)) {
						return null
					}

				// from dictionary
					return AUDIO_J.constants.notes[String(midi)] || null
			} catch (error) {console.log(error)}
		}

	/* convertMidiToHz */
		AUDIO_J.convertMidiToHz = convertMidiToHz
		function convertMidiToHz(midi) {
			try {
				// no midi or invalid
					if (!midi || isNaN(midi)) {
						return null
					}

				// calculate
					return Math.pow(2, (midi - AUDIO_J.constants.tuningAMidi) / AUDIO_J.constants.semitonesPerOctave) * AUDIO_J.constants.tuningAHz
			} catch (error) {console.log(error)}
		}

	/* convertHzToMidi */
		AUDIO_J.convertHzToMidi = convertHzToMidi
		function convertHzToMidi(hz) {
			try {
				// no Hz or invalid
					if (!hz || isNaN(hz)) {
						return null
					}

				// calculate
					return AUDIO_J.constants.semitonesPerOctave * Math.log2(hz / AUDIO_J.constants.tuningAHz) + AUDIO_J.constants.tuningAMidi
			} catch (error) {console.log(error)}
		}

/*** buildAudio ***/
	/* buildAudio */
		AUDIO_J.buildAudio = buildAudio
		function buildAudio() {
			try {
				// audio context
					AUDIO_J.audio = new (window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.oAudioContext || window.msAudioContext)()
					const now = (AUDIO_J.audio.currentTime || 0)

				// master volume
					AUDIO_J.master = AUDIO_J.audio.createGain()
					AUDIO_J.master.connect(AUDIO_J.audio.destination)
					AUDIO_J.master.gain.setValueAtTime(1, now)

				// recorder
					buildRecorder()

				// noise
					buildNoise()
			} catch (error) {console.log(error)}
		}

	/* buildNoise */
		function buildNoise() {
			try {
			// white
				AUDIO_J.noise.white = AUDIO_J.audio.createScriptProcessor(AUDIO_J.constants.bufferCount, 1, 1)
				AUDIO_J.noise.white.onaudioprocess = function(event) {
					const output = event.outputBuffer.getChannelData(0)
					
					for (let i = 0; i < AUDIO_J.constants.bufferCount; i++) {
						output[i] = Math.random() * 2 - 1
					}
				}

			// brown
				AUDIO_J.noise.brown = AUDIO_J.audio.createScriptProcessor(AUDIO_J.constants.bufferCount, 1, 1)
				AUDIO_J.noise.brown.onaudioprocess = function(event) {
					const output = event.outputBuffer.getChannelData(0)
					let lastOut = 0.0

					for (let i = 0; i < AUDIO_J.constants.bufferCount; i++) {
						output[i] = (lastOut + (0.02 * (Math.random() * 2 - 1))) / 1.02
						lastOut = output[i]
						output[i] *= 3.5
					}
				}

			// pink
				AUDIO_J.noise.pink = AUDIO_J.audio.createScriptProcessor(AUDIO_J.constants.bufferCount, 1, 1)
				AUDIO_J.noise.pink.onaudioprocess = function(event) {
					const output = event.outputBuffer.getChannelData(0)
					
					let b0,  b1,  b2,  b3,  b4,  b5,  b6
						b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0
					for (let i = 0; i < AUDIO_J.constants.bufferCount; i++) {
						var random = Math.random() * 2 - 1
						b0 = 0.99886 * b0 + random * 0.0555179
						b1 = 0.99332 * b1 + random * 0.0750759
						b2 = 0.96900 * b2 + random * 0.1538520
						b3 = 0.86650 * b3 + random * 0.3104856
						b4 = 0.55000 * b4 + random * 0.5329522
						b5 = -0.7616 * b5 - random * 0.0168980
						output[i] = (b0 + b1 + b2 + b3 + b4 + b5 + b6 + random * 0.5362) * 0.11
						b6 = random * 0.115926
					}
				}
			} catch (error) {console.log(error)}
		}	

/*** instruments ***/
	/* buildInstrument */
		AUDIO_J.buildInstrument = buildInstrument
		function buildInstrument(parameters) {
			try {
				// parameters & nodes
					const now = AUDIO_J.audio.currentTime || 0
					const instrument = {
						parameters: {
							polysynth:    {},
							noise:        {},
							imag:         new Float32Array(1 + AUDIO_J.constants.waveCount),
							real:         new Float32Array(1 + AUDIO_J.constants.waveCount),
							wave:         null,
							envelope: {
								attack:   0,
								decay:    0,
								sustain:  1,
								release:  0,
							},
							bitcrusher:   {
								bits: 0,
								norm: 0
							},
							filters:      {},
							echo: {
								delay:    0,
								feedback: 0
							},
							panning: 0
						},
						timeouts:      {},
						noise:         {},
						tones:         {},
						velocities:    {},
						envelopes:     {},
						bitcrusherIn:  AUDIO_J.audio.createGain(),
						bitcrusher:    AUDIO_J.audio.createScriptProcessor(AUDIO_J.constants.bufferCount, 1, 1),
						bitcrusherOut: AUDIO_J.audio.createGain(),
						filterIn:      AUDIO_J.audio.createGain(),
						filters:       {},
						filterOut:     AUDIO_J.audio.createGain(),
						delay:         AUDIO_J.audio.createDelay(),
						feedback:      AUDIO_J.audio.createGain(),
						volume:        AUDIO_J.audio.createGain(),
						power:         AUDIO_J.audio.createGain(),
						panner:        AUDIO_J.audio.createStereoPanner(),
						currentVolume: 0.5,
						currentPower: 1
					}

				// wave (for tone oscillators)
					instrument.parameters.imag[1] = 1
					instrument.parameters.wave = AUDIO_J.audio.createPeriodicWave(instrument.parameters.real, instrument.parameters.imag)

				// noise
					for (let color in AUDIO_J.noise) {
						instrument.noise[color] = AUDIO_J.audio.createGain()
						instrument.noise[color].gain.setValueAtTime(0, now)
						AUDIO_J.noise[color].connect(instrument.noise[color]) // noise in, but not out
					}

				// default values
					instrument.filterIn.gain.setValueAtTime(1, now)
					instrument.filterOut.gain.setValueAtTime(1, now)
					instrument.delay.delayTime.setValueAtTime(0, now)
					instrument.feedback.gain.setValueAtTime(0, now)
					instrument.volume.gain.setValueAtTime(instrument.currentVolume, now)	
					instrument.power.gain.setValueAtTime(instrument.currentPower, now)

				// connections
					instrument.bitcrusherIn.connect(instrument.bitcrusherOut) // bypass
					instrument.bitcrusher.connect(instrument.bitcrusherOut)
					instrument.bitcrusherOut.connect(instrument.filterIn)
					
					instrument.filterIn.connect(instrument.filterOut) // bypass
					instrument.filterOut.connect(instrument.delay)  // split
					instrument.filterOut.connect(instrument.volume) // bypass

					instrument.delay.connect(instrument.feedback)
					instrument.feedback.connect(instrument.delay) // loop back
					instrument.feedback.connect(instrument.volume)

					instrument.volume.connect(instrument.panner)
					instrument.panner.connect(instrument.power)
					instrument.power.connect(AUDIO_J.master)

				/* crushBits */
					instrument.crushBits = function(event) {
						const input  = event.inputBuffer.getChannelData(0)
						const output = event.outputBuffer.getChannelData(0)
						const step = Math.pow(0.5, instrument.parameters.bitcrusher.bits)

						let wait = 0
						let hold = 0

						for (let x = 0; x < AUDIO_J.constants.bufferCount; x++) {
							wait += instrument.parameters.bitcrusher.norm
							if (wait >= 1) {
								wait -= 1
								hold  = step * Math.floor((input[x] / step) + 0.5)
							}
							output[x] = hold
						}
					}

				/* setParameters */
					instrument.setParameters = function(parameters) {
						try {
							const now = AUDIO_J.audio.currentTime || 0
							
							// name
								if (parameters.name !== undefined) {
									instrument.parameters.name = parameters.name.trim()
								}

							// power
								if (parameters.power !== undefined) {
									parameters.power = Math.max(0, Math.min(1, Math.floor(parameters.power || 0)))
									instrument.currentPower = parameters.power
									instrument.power.gain.setValueAtTime(parameters.power, now)

									// off --> kill pitches & feedback
										if (!instrument.currentPower) {
											for (let p in instrument.velocities) {
												instrument.kill(p)
											}

											instrument.feedback.gain.cancelScheduledValues(now)
											instrument.delay.delayTime.setValueAtTime(0, now)
											instrument.feedback.gain.setValueAtTime(0, now)
										}

									// on --> reactivate feedback
										if (instrument.currentPower) {
											instrument.delay.delayTime.setValueAtTime(instrument.parameters.echo.delay, now)
											instrument.feedback.gain.setValueAtTime(instrument.parameters.echo.feedback, now)
										}
								}

							// volume
								if (parameters.volume !== undefined) {
									parameters.volume = Math.max(0, Math.min(1, parameters.volume))
									instrument.currentVolume = parameters.volume
									instrument.volume.gain.setValueAtTime(parameters.volume, now)
								}

							// oscillator
								if (parameters.imag !== undefined) {
									instrument.parameters.imag = new Float32Array(1 + AUDIO_J.constants.waveCount)
									instrument.parameters.real = new Float32Array(1 + AUDIO_J.constants.waveCount)
									for (let x = 1; x < instrument.parameters.imag.length; x++) {
										instrument.parameters.imag[x] = parameters.imag[x] || 0
									}
									instrument.parameters.wave = AUDIO_J.audio.createPeriodicWave(instrument.parameters.real, instrument.parameters.imag)
								}

								if (parameters.harmonic !== undefined) {
									const harmonic = Object.keys(parameters.harmonic)[0]
									instrument.parameters.imag[harmonic] = Math.max(0, Math.min(1, parameters.harmonic[harmonic]))
									instrument.parameters.wave   = AUDIO_J.audio.createPeriodicWave(instrument.parameters.real, instrument.parameters.imag)
								}

							// polysynth
								if (parameters.polysynth !== undefined) {
									for (let x in parameters.polysynth) {
										const tone = Math.max(-AUDIO_J.constants.semitonesPerOctave, Math.min(AUDIO_J.constants.semitonesPerOctave, x))
										if (parameters.polysynth[tone] && !instrument.parameters.polysynth[tone]) {
											instrument.parameters.polysynth[tone] = true
										}
										else if (!parameters.polysynth[tone] && instrument.parameters.polysynth[tone]) {
											delete instrument.parameters.polysynth[tone]
										}
									}
								}

							// noise
								if (parameters.noise !== undefined) {
									for (let color in parameters.noise) {
										const value = Math.min(1, Math.max(0, parameters.noise[color]))
										if (value) {
											instrument.parameters.noise[color] = value
											instrument.noise[color].gain.setValueAtTime(value, now)
										}
										else if (color in instrument.parameters.noise) {
											delete instrument.parameters.noise[color]
											instrument.noise[color].gain.setValueAtTime(0, now)
										}
									}
								}

							// envelope
								if (parameters.envelope !== undefined) {
									instrument.parameters.envelope.attack  = Math.max(0, Math.min(1, parameters.envelope.attack ))
									instrument.parameters.envelope.decay   = Math.max(0, Math.min(1, parameters.envelope.decay  ))
									instrument.parameters.envelope.sustain = Math.max(0, Math.min(1, parameters.envelope.sustain))
									instrument.parameters.envelope.release = Math.max(0, Math.min(1, parameters.envelope.release))
								}

							// bitcrusher
								if (parameters.bitcrusher !== undefined) {
									// parameters
										const bits = AUDIO_J.constants.bitcrusherBits.includes(Number(parameters.bitcrusher.bits)) ? Number(parameters.bitcrusher.bits) : 0
										const norm = bits ? Math.max(0.001, Math.min(1, parameters.bitcrusher.norm)) || 1 : 0

									// no bits / norm now --> bypass
										if (!bits || !norm) {
											instrument.bitcrusherIn.disconnect()
											instrument.bitcrusherIn.connect(instrument.bitcrusherOut)
											instrument.bitcrusher.onaudioprocess = null
										}

									// bits & norm now, but not before --> reconnect
										else if (!instrument.parameters.bitcrusher.bits || !instrument.parameters.bitcrusher.norm) {
											instrument.bitcrusher.onaudioprocess = instrument.crushBits
											instrument.bitcrusherIn.disconnect()
											instrument.bitcrusherIn.connect(instrument.bitcrusher)
										}

									// set values
										instrument.parameters.bitcrusher.bits = bits
										instrument.parameters.bitcrusher.norm = norm
								}

							// filter
								if (parameters.filters !== undefined) {
									for (let f in parameters.filters) {
										const gain = Math.max(AUDIO_J.constants.filterGainMinimum, Math.min(AUDIO_J.constants.filterGainMaximum, parameters.filters[f].gain))

										// delete filter
											if (Math.abs(gain) < AUDIO_J.constants.filterGainThreshold) {
												if (instrument.filters[f]) {
													instrument.filters[f].gain.cancelScheduledValues(now)
													instrument.filters[f].disconnect()
													delete instrument.filters[f]
													delete instrument.parameters.filters[f]
												}
											}

										// new / adjust filter
											else {
												const low  = Math.max(AUDIO_J.constants.minFrequency, Math.min(AUDIO_J.constants.maxFrequency, parameters.filters[f].low ))
												const mid  = Math.max(AUDIO_J.constants.minFrequency, Math.min(AUDIO_J.constants.maxFrequency, parameters.filters[f].mid ))
												const high = Math.max(AUDIO_J.constants.minFrequency, Math.min(AUDIO_J.constants.maxFrequency, parameters.filters[f].high))
												const type = ((mid < AUDIO_J.constants.lowShelfThreshold) ? "lowshelf" : (mid > AUDIO_J.constants.highShelfThreshold) ? "highshelf" : "peaking")
												
												instrument.parameters.filters[f] = {
													low: low,
													mid: mid,
													high: high,
													type: type,
													frequency: ((type == "lowshelf") ? high : (type == "highshelf") ? low : mid),
													q:    mid / (high - low),
													gain: gain
												}

												if (!instrument.filters[f]) {
													instrument.filters[f] = AUDIO_J.audio.createBiquadFilter()	
												}
												instrument.filters[f].type = type
												instrument.filters[f].frequency.setValueAtTime(                         instrument.parameters.filters[f].frequency,  now)
												instrument.filters[f].Q.setValueAtTime(Math.min(AUDIO_J.constants.Qmax, instrument.parameters.filters[f].q),         now)
												instrument.filters[f].gain.setValueAtTime(                              instrument.parameters.filters[f].gain,       now)
											}
									}

									// manage connections
										instrument.filterIn.disconnect()

										var fkeys = Object.keys(instrument.filters) || []
										if (fkeys.length) {
											for (var f = 0; f < fkeys.length; f++) {
												instrument.filters[fkeys[f]].disconnect()
											}

											for (var f = 0; f < fkeys.length; f++) {
												if (!f) {
													instrument.filterIn.connect(instrument.filters[fkeys[f]])
												}
												if (f + 1 == fkeys.length) {
													instrument.filters[fkeys[f]].connect(instrument.filterOut)
												}
												else {
													instrument.filters[fkeys[f]].connect(instrument.filters[fkeys[f + 1]])
												}
											}
										}
										else {
											instrument.filterIn.connect(instrument.filterOut)
										}
								}

							// echo
								if (parameters.echo !== undefined) {
									instrument.parameters.echo.delay    = Math.max(0, Math.min(1, parameters.echo.delay   )) || 0
									instrument.parameters.echo.feedback = Math.max(0, Math.min(AUDIO_J.constants.echoFeedbackMaximum, parameters.echo.feedback)) || 0

									instrument.delay.delayTime.setValueAtTime(instrument.parameters.echo.delay, now)
									instrument.feedback.gain.setValueAtTime(instrument.parameters.echo.feedback, now)

									if (!instrument.parameters.echo.delay || !instrument.parameters.echo.feedback) {
										instrument.feedback.gain.cancelScheduledValues(now)
										instrument.feedback.gain.setValueAtTime(0, now)
									}
								}

							// panning
								if (parameters.panning !== undefined) {
									const value = Math.max(-1, Math.min(1, parameters.panning)) || 0
									instrument.panner.pan.cancelScheduledValues(now)
									instrument.parameters.panning = value
									instrument.panner.pan.setValueAtTime(instrument.parameters.panning, now)
								}
						} catch (error) {console.log(error)}
					}

				/* press */
					instrument.press = function(pitch, velocity, waitToTriggerMS, waitToEndMS) {
						try {
							// scheduled
								if (waitToTriggerMS) {
									setTimeout(function() {
										instrument.press(pitch, velocity, null, waitToEndMS)
									}, waitToTriggerMS)
									return
								}

							// off?
								if (!instrument.currentPower) {
									return
								}

							// info
								pitch = Math.max(AUDIO_J.constants.minPitch, Math.min(AUDIO_J.constants.maxPitch, pitch))
								const now = AUDIO_J.audio.currentTime || 0

							// timeouts
								if (instrument.timeouts[pitch]) {
									clearInterval(instrument.timeouts[pitch])
									delete instrument.timeouts[pitch]
								}

							// velocity
								velocity = Math.max(AUDIO_J.constants.minVelocity, Math.min(AUDIO_J.constants.maxVelocity, (velocity || AUDIO_J.constants.defaultVelocity)))

								if (instrument.velocities[pitch]) {
									instrument.velocities[pitch].gain.cancelScheduledValues(now)
									instrument.velocities[pitch].disconnect()
									delete instrument.velocities[pitch]
								}
								
								instrument.velocities[pitch] = AUDIO_J.audio.createGain()
								instrument.velocities[pitch].gain.setValueAtTime(velocity, now)

							// noise
								for (let color in AUDIO_J.noise) {
									instrument.noise[color].connect(instrument.velocities[pitch])
								}

							// oscillator
								for (let p in instrument.parameters.polysynth) {
									const distance = p
									const multiplier = Math.pow(AUDIO_J.constants.oscillatorFactor, distance)

									if (instrument.tones[pitch + "_" + distance]) {
										instrument.tones[pitch + "_" + distance].stop(now)
										instrument.tones[pitch + "_" + distance].disconnect()
										delete instrument.tones[pitch + "_" + distance]
									}

									instrument.tones[pitch + "_" + distance] = AUDIO_J.audio.createOscillator()
									instrument.tones[pitch + "_" + distance].connect(instrument.velocities[pitch])
									instrument.tones[pitch + "_" + distance].frequency.setValueAtTime(pitch * multiplier, now)
									instrument.tones[pitch + "_" + distance].setPeriodicWave(instrument.parameters.wave)
									instrument.tones[pitch + "_" + distance].start(now)
								}

							// envelopes
								if (instrument.envelopes[pitch]) {
									instrument.envelopes[pitch].gain.cancelScheduledValues(now)
									instrument.envelopes[pitch].disconnect()
									delete instrument.envelopes[pitch]
								}

								const attackTime = now + (instrument.parameters.envelope.attack || 0)
								const decayTime = attackTime + (instrument.parameters.envelope.decay || 0)
								const sustainVolume = (instrument.parameters.envelope.sustain || 0)

								instrument.envelopes[pitch] = AUDIO_J.audio.createGain()
								instrument.velocities[pitch].connect(instrument.envelopes[pitch])
								instrument.envelopes[pitch].connect(instrument.bitcrusherIn)

								instrument.envelopes[pitch].gain.setValueAtTime(0, now)
								instrument.envelopes[pitch].gain.linearRampToValueAtTime(1, attackTime)

								instrument.envelopes[pitch].gain.exponentialRampToValueAtTime(sustainVolume + AUDIO_J.constants.arbitrarilySmall, decayTime)
								instrument.envelopes[pitch].gain.linearRampToValueAtTime(sustainVolume, decayTime + AUDIO_J.constants.arbitrarilySmall)

							// no sustain --> auto-delete
								if (!sustainVolume) {
									const postDecay = ((instrument.parameters.envelope.attack || 0) + (instrument.parameters.envelope.decay || 0) + AUDIO_J.constants.arbitrarilySmall) * AUDIO_J.constants.ms
									instrument.timeouts[pitch] = setTimeout(function() {
										instrument.kill(pitch)
									}, postDecay)
								}

							// schedule lift
								else if (waitToEndMS) {
									instrument.lift(pitch, waitToEndMS)
								}
						} catch (error) {console.log(error)}
					}

				/* lift */
					instrument.lift = function(pitch, waitToTriggerMS) {
						try {
							// scheduled
								if (waitToTriggerMS) {
									setTimeout(function() {
										instrument.lift(pitch)
									}, waitToTriggerMS)
									return
								}

							// info
								pitch = Math.max(AUDIO_J.constants.minPitch, Math.min(AUDIO_J.constants.maxPitch, pitch))
								const now = AUDIO_J.audio.currentTime || 0

							// no envelope
								if (!instrument.envelopes[pitch]) {
									return
								}							

							// already off
								const currentVolume = instrument.envelopes[pitch].gain.value || 0
								if (!currentVolume) {
									instrument.kill(pitch)
									return
								}

							// attack-decay only (kill already scheduled)
								const sustainVolume = instrument.parameters.envelope.sustain || 0
							 	if (!sustainVolume) {
									return
								}

							// release
								const releaseTime = now + (instrument.parameters.envelope.release || 0)
								instrument.envelopes[pitch].gain.cancelScheduledValues(now)
								instrument.envelopes[pitch].gain.setValueAtTime(currentVolume, now)
								instrument.envelopes[pitch].gain.exponentialRampToValueAtTime(AUDIO_J.constants.arbitrarilySmall, releaseTime)
								instrument.envelopes[pitch].gain.linearRampToValueAtTime(0, releaseTime + AUDIO_J.constants.arbitrarilySmall)

							// delete
								const postRelease = ((instrument.parameters.envelope.release || 0) + AUDIO_J.constants.arbitrarilySmall) * AUDIO_J.constants.ms
								instrument.timeouts[pitch] = setTimeout(function() {
									instrument.kill(pitch)
								}, postRelease)
						} catch (error) {console.log(error)}
					}

				/* kill */
					instrument.kill = function(pitch) {
						try {
							// timeout
								const now = AUDIO_J.audio.currentTime || 0
								clearInterval(instrument.timeouts[pitch])
								delete instrument.timeouts[pitch]

							// envelope
								if (instrument.envelopes[pitch]) {
									instrument.envelopes[pitch].gain.cancelScheduledValues(now)
									instrument.envelopes[pitch].disconnect()
									delete instrument.envelopes[pitch]
								}

							// velocity
								if (instrument.velocities[pitch]) {
									instrument.velocities[pitch].gain.cancelScheduledValues(now)
									instrument.velocities[pitch].disconnect()
									delete instrument.velocities[pitch]
								}

							// tones
								Object.keys(instrument.tones).forEach(function (t) {
									if (t.split("_")[0] == pitch) {
										instrument.tones[t].stop(now)
										instrument.tones[t].disconnect()
										delete instrument.tones[t]
									}
								})
						} catch (error) {console.log(error)}
					}
				
				// start
					instrument.setParameters(parameters || {})
					return instrument
			} catch (error) {console.log(error)}
		}

	/* getInstrument */
		AUDIO_J.getInstrument = getInstrument
		function getInstrument(name) {
			try {
				// random
					if (name == "random") {
						// name
							const num = Math.floor(Math.random() * 10e6)

						// polysynth
							const polysynth = {
								"0": true
							}
							if (!Math.floor(Math.random() * 4)) { polysynth["-12"] = true }
							if (!Math.floor(Math.random() * 8)) { polysynth["-7"]  = true }
							if (!Math.floor(Math.random() * 7)) { polysynth["4"]   = true }
							if (!Math.floor(Math.random() * 5)) { polysynth["7"]   = true }
							if (!Math.floor(Math.random() * 8)) { polysynth["10"]  = true }
							if (!Math.floor(Math.random() * 4)) { polysynth["12"]  = true }

						// imag
							const imag = [0]
							for (let i = 1; i <= AUDIO_J.constants.waveCount; i++) {
								imag[i] = Math.random() * (1 / i)
							}

						// noise
							const noise = {}
							if (!Math.floor(Math.random() * 2)) { noise.white = Math.floor(Math.random() * 3) / 10 }
							if (!Math.floor(Math.random() * 2)) { noise.pink  = Math.floor(Math.random() * 4) / 10 }
							if (!Math.floor(Math.random() * 2)) { noise.brown = Math.floor(Math.random() * 5) / 10 }

						// envelope
							const envelope = {}
							for (let i in AUDIO_J.constants.envelopeComponents) {
								envelope[AUDIO_J.constants.envelopeComponents[i]] = Math.random()
							}

						// bitcrusher
							const bits = Math.floor(Math.random() * 2) ? AUDIO_J.constants.bitcrusherBits[Math.floor(Math.random() * AUDIO_J.constants.bitcrusherBits.length)] : 0
							const bitcrusher = {
								bits: bits,
								norm: bits ? Math.random() : 0
							}

						// echo
							const echo = {
								delay: 0,
								feedback: 0
							}
							if (Math.floor(Math.random() * 4)) {
								echo.delay =    Math.random() * 0.5
								echo.feedback = Math.random() * 0.8
							}

						// filter
							const filters = {}
							const filterCount = Math.floor(Math.random() * 4)
							for (let f = 0; f < filterCount; f++) {
								const midMidi  = (Math.random() * AUDIO_J.constants.semitonesPerOctave * (AUDIO_J.constants.filterOctaves - 2)) + AUDIO_J.constants.semitonesPerOctave
								const distance = (Math.random() * AUDIO_J.constants.semitonesPerOctave * 2)
								const lowMidi  = midMidi - distance
								const highMidi = midMidi + distance
								
								filters[String(f)] = {
									low:  AUDIO_J.convertMidiToHz(lowMidi),
									mid:  AUDIO_J.convertMidiToHz(midMidi),
									high: AUDIO_J.convertMidiToHz(highMidi),
									gain: Math.random() * (AUDIO_J.constants.filterGainMaximum / 2) * (Math.floor(Math.random() * 2) ? 1 : -1)
								}
							}

						// instrument
							return {
								name: "synthesizer #" + num,
								polysynth: polysynth,
								imag: imag,
								noise: noise,
								envelope: envelope,
								bitcrusher: bitcrusher,
								echo: echo,
								filters: filters
							}
					}
				
				// from simple list
					else if (name in AUDIO_J.simpleInstruments) {
						return AUDIO_J.simpleInstruments[name]
					}

				// from default list
					else if (name in AUDIO_J.defaultInstruments) {
						return AUDIO_J.defaultInstruments[name]
					}
					
				// from localstorage
					else if (window.localStorage.synthesizers) {
						const customInstruments = JSON.parse(window.localStorage.synthesizers)
						if (name in customInstruments) {
							return customInstruments[name]
						}
					}
				
				// not found
					return null
			} catch (error) {console.log(error)}
		}

	/* getInstruments */
		AUDIO_J.getInstruments = getInstruments
		function getInstruments(only) {
			try {
				// simples
					const simpleInstruments = Object.keys(AUDIO_J.simpleInstruments)
					if (only == "simple") {
						return simpleInstruments
					}

				// defaults
					const defaultInstruments = Object.keys(AUDIO_J.defaultInstruments) || []
					if (only == "default") {
						return defaultInstruments
					}

				// custom
					const customInstruments = []
					if (window.localStorage.synthesizers) {
						const localInstruments = JSON.parse(window.localStorage.synthesizers)
						if (typeof localInstruments == "object") {
							for (let i in localInstruments) {
								customInstruments.push(i)
							}
						}
					}
					if (only == "custom") {
						return customInstruments
					}

				// all
					return simpleInstruments.concat(defaultInstruments).concat(customInstruments)
			} catch (error) {console.log(error)}
		}

/*** MIDI ***/
	/* buildMidi */
		if (navigator.requestMIDIAccess) {
			navigator.requestMIDIAccess().then(buildMidi)
		}
		function buildMidi(midi) {
			try {
				// no midi
					if (!midi) {
						return
					}

				// create midi object
					AUDIO_J.midi.system = midi
					AUDIO_J.midi.controllers = {}
					AUDIO_J.midi.consumers   = {}

				// check inputs & outputs
					AUDIO_J.midi.system.onstatechange = function(event) {
						try {
							console.log(event.port.name + " " + event.port.manufacturer + " " + event.port.state)
							updateMidiInputs()
							updateMidiOutputs()
						} catch (error) {console.log(error)}
					}

				// wait until other javascript loads in case there are connection listeners
					setTimeout(function() {
						updateMidiInputs()
						updateMidiOutputs()
					}, 0)
			} catch (error) {console.log(error)}
		}

	/* update controllers */
		function updateMidiInputs() {
			try {
				// get existing
					const previousControllers = Object.keys(AUDIO_J.midi.controllers)

				// add new
					const inputs = AUDIO_J.midi.system.inputs.values()
					const newControllers = []
					for (let input = inputs.next(); input && !input.done; input = inputs.next()) {
						const id = input.value.name + "_" + input.value.id
						
						if (previousControllers.includes(id)) {
							previousControllers.splice(previousControllers.indexOf(id))
							continue
						}
						
						if (!previousControllers.includes(id)) {
							newControllers.push(id)
							AUDIO_J.midi.controllers[id] = input.value
							AUDIO_J.midi.controllers[id].onmidimessage = receiveMidiMessage

							if (AUDIO_J.midi.connectDevice) {
								AUDIO_J.midi.connectDevice("controller", id)
							}
						}
					}

				// remove old
					for (let i in previousControllers) {
						delete AUDIO_J.midi.controllers[previousControllers[i]]

						if (AUDIO_J.midi.disconnectDevice) {
							AUDIO_J.midi.disconnectDevice("controller", previousControllers[i])
						}
					}
			} catch (error) {console.log(error)}
		}

	/* update consumers */
		function updateMidiOutputs() {
			try {
				// get existing
					const previousConsumers = Object.keys(AUDIO_J.midi.consumers)

				// add new
					const outputs = AUDIO_J.midi.system.outputs.values()
					const newConsumers = []
					for (let output = outputs.next(); output && !output.done; output = outputs.next()) {
						const id = output.value.name + "_" + output.value.id
						
						if (previousConsumers.includes(id)) {
							previousConsumers.splice(previousConsumers.indexOf(id))
							continue
						}
						
						if (!previousConsumers.includes(id)) {
							newConsumers.push(id)
							AUDIO_J.midi.consumers[id] = output.value

							if (AUDIO_J.midi.connectDevice) {
								AUDIO_J.midi.connectDevice("consumer", id)
							}
						}
					}

				// remove old
					for (let i in previousConsumers) {
						delete AUDIO_J.midi.consumers[previousConsumers[i]]

						if (AUDIO_J.midi.disconnectDevice) {
							AUDIO_J.midi.disconnectDevice("consumer", previousConsumers[i])
						}
					}
			} catch (error) {console.log(error)}
		}

	/* receive Midi message */
		function receiveMidiMessage(event) {
			try {
				// active instrument
					const activeInstrument = AUDIO_J.instruments && AUDIO_J.activeInstrumentId ? AUDIO_J.instruments[AUDIO_J.activeInstrumentId] : null
					if (!activeInstrument) {
						return
					}

				// press key
					if ((event.data[0] == 144) && event.data[2]) {
						const note = event.data[1]
						const velocity = event.data[2] / AUDIO_J.constants.midiVelocityFactor

						activeInstrument.press(AUDIO_J.getNote(note)[0], 0, velocity)
						if (AUDIO_J.midi.pressKey) {
							AUDIO_J.midi.pressKey(note, velocity)
						}

						if (AUDIO_J.pedal && AUDIO_J.sustained[note]) {
							delete AUDIO_J.sustained[note]
						}
						return
					}

				// lift key
					if ((event.data[0] == 128) || (event.data[0] == 144)) {
						const note = event.data[1]

						if (!AUDIO_J.pedal) {
							activeInstrument.lift(AUDIO_J.getNote(note)[0])
							if (AUDIO_J.midi.liftKey) {
								AUDIO_J.midi.liftKey(note)
							}
						}
						else {
							AUDIO_J.sustained[note] = true
						}
						return
					}

				// press pedal
					if ((event.data[0] == 176 || event.data[0] == 177) && (event.data[1] == 64) && event.data[2]) {
						if (!AUDIO_J.pedal) {
							AUDIO_J.pedal = true
							if (AUDIO_J.midi.pressPedal) {
								AUDIO_J.midi.pressPedal()
							}
						}
						return
					}

				// lift pedal
					if ((event.data[0] == 176 || event.data[0] == 177) && (event.data[1] == 64)) {
						if (AUDIO_J.pedal) {
							AUDIO_J.pedal = null
							if (AUDIO_J.midi.liftPedal) {
								AUDIO_J.midi.liftPedal()
							}

							for (let s in AUDIO_J.sustained) {
								const note = s
								delete AUDIO_J.sustained[s]
								activeInstrument.lift(AUDIO_J.getNote(note)[0])
								if (AUDIO_J.midi.liftKey) {
									AUDIO_J.midi.liftKey(note)
								}
							}
						}
						return
					}
			} catch (error) {console.log(error)}
		}

/*** recording ***/
	/* buildRecorder */
		function buildRecorder() {
			try {
				// destination
					AUDIO_J.recorder.mediaStreamDestination = AUDIO_J.audio.createMediaStreamDestination()
					AUDIO_J.master.connect(AUDIO_J.recorder.mediaStreamDestination)

				// recorder
					try {
						AUDIO_J.recorder.mediaRecorder = new MediaRecorder(AUDIO_J.recorder.mediaStreamDestination.stream, {mimeType: "audio/webm;codecs=opus"})
					} catch (e) {
						AUDIO_J.recorder.mediaRecorder = new MediaRecorder(AUDIO_J.recorder.mediaStreamDestination.stream)
					}

				// data while recording
					AUDIO_J.recorder.mediaRecorder.ondataavailable = function(event) {
						AUDIO_J.recorder.data.push(event.data)
					}

				// stop recording
					AUDIO_J.recorder.mediaRecorder.onstop = function(event) {
						// download
							if (AUDIO_J.recorder.data.length && AUDIO_J.recorder.download) {
								const dataBlob = new Blob(AUDIO_J.recorder.data)
								const downloadLink = document.createElement("a")
									downloadLink.href = URL.createObjectURL(dataBlob, {"type": "audio/webm;codecs=opus"})
									downloadLink.download = (document.title || "audio_j") + "_" + new Date().getTime() + ".webm"
									downloadLink.style.display = "none"
									downloadLink.onclick = function(event) { document.body.removeChild(event.target) }
								document.body.appendChild(downloadLink)
								downloadLink.click()
							}

						// clear data
							AUDIO_J.recorder.download = false
							AUDIO_J.recorder.data = []
					}
			} catch (error) {console.log(error)}
		}

	/* startRecording */
		AUDIO_J.startRecording = startRecording
		function startRecording() {
			try {
				// no audio
					if (!AUDIO_J.audio || !AUDIO_J.recorder || !AUDIO_J.recorder.mediaStreamDestination || !AUDIO_J.recorder.mediaRecorder) {
						return
					}

				// already recording
					if (AUDIO_J.recorder.mediaRecorder.state == "recording") {
						return
					}

				// start recording
					AUDIO_J.recorder.mediaRecorder.start()
			} catch (error) {console.log(error)}
		}

	/* stopRecording */
		AUDIO_J.stopRecording = stopRecording
		function stopRecording() {
			try {
				// no audio
					if (!AUDIO_J.audio || !AUDIO_J.recorder || !AUDIO_J.recorder.mediaStreamDestination || !AUDIO_J.recorder.mediaRecorder) {
						return
					}

				// already stopped
					if (AUDIO_J.recorder.mediaRecorder.state !== "recording") {
						return
					}

				// stop recording
					AUDIO_J.recorder.download = true
					AUDIO_J.recorder.mediaRecorder.stop()
			} catch (error) {console.log(error)}
		}

	/* cancelRecording */
		AUDIO_J.cancelRecording = cancelRecording
		function cancelRecording() {
			try {
				// no audio
					if (!AUDIO_J.audio || !AUDIO_J.recorder || !AUDIO_J.recorder.mediaStreamDestination || !AUDIO_J.recorder.mediaRecorder) {
						return
					}

				// already stopped
					if (AUDIO_J.recorder.mediaRecorder.state !== "recording") {
						return
					}

				// stop recording
					AUDIO_J.recorder.download = false
					AUDIO_J.recorder.mediaRecorder.stop()
			} catch (error) {console.log(error)}
		}
