/*** globals ***/
	/* constants */
		const AUDIO_J = {
			constants: {
				arbitrarilySmall: 0.001, // x
				ms: 1000, // ms
				semitonesPerOctave: 12, // semitones
				tuningAHz: 440, // Hz
				tuningAMidi: 69, // semitones
				oscillatorFactor: 1.05946309436, // Hz ratio per semitone
				harmonicsCount: 32, // wave overtones
				bufferCount: 1024, // array size
				maxVibratoCents: 200, // semitone ¢
				minVibratoInterval: 1, // ms
				maxVibratoInterval: 500, // ms
				maxChorusCents: 50, // semitone ¢
				chorusGain: 0.25, // ratio
				minTremoloInterval: 1, // ms
				maxTremoloInterval: 1000, // s
				envelopeComponents: ["attack", "decay", "sustain", "release"],
				bitcrusherBits: [64, 32, 16, 8, 4, 2, 1], // bits
				distortionCount: 256, // array size
				distortionTime: 1, // s
				maxDistortion: Math.PI * 4, // radians
				filterOctaves: 10, // octaves
				filterGainMinimum: -50, // dB
				filterGainMaximum: 50, // dB
				filterGainThreshold: 2, // dB
				lowShelfThreshold: 65, // Hz
				highShelfThreshold: 4000, // Hz
				Qmax: 10000, // quality factor
				minFrequency: 1, // Hz
				maxFrequency: 20000, // Hz
				minPitch: 8.175, // Hz
				maxPitch: 16744.04, // Hz
				echoFeedbackMaximum: 0.9, // ratio
				minCompressorThreshold: -100, // dB
				maxCompressorThreshold: 0, // dB
				minCompressorKnee: 0, // dB
				defaultCompressorKnee: 30, // dB
				maxCompressorKnee: 40, // dB
				minCompressorRatio: 1, // ratio
				maxCompressorRatio: 20, // ratio
				minCompressorAttack: 0, // s
				maxCompressorAttack: 1, // s
				minCompressorRelease: 0, // s
				maxCompressorRelease: 1, // s
				minVelocity: 0, // ratio
				defaultVelocity: 1, // ratio
				maxVelocity: 2, // ratio
				midiVelocityFactor: 64, // midi signal
				instrumentFamilies: ["keyboard", "pipe", "reed", "brass", "string", "guitar", "percussion", "voice", "sfx"],
				notes: {
					// midi:  [Hz, name, accidental, octave]
					// octave -1
						"0":  [8.175, "C", 0, -1], 			// C-1
						"1":  [8.66, "C", 1, -1], 			// C#-1 / Db-1
						"2":  [9.175, "D", 0, -1], 			// D-1
						"3":  [9.725, "E", -1, -1], 		// D#-1 / Eb-1
						"4":  [10.30, "E", 0, -1], 			// E-1
						"5":  [10.915, "F", 0, -1], 		// F-1
						"6":  [11.56, "F", 1, -1], 			// F#-1 / Gb-1
						"7":  [12.25, "G", 0, -1], 			// -1
						"8":  [12.98, "A", -1, -1], 		// G#-1 / Ab-1
						"9":  [13.75, "A", 0, -1], 			// A-1
						"10": [14.57, "B", -1, -1], 		// A#-1 / Bb-1
						"11": [15.435, "B", 0, -1], 		// B-1
					// octave 0
						"12": [16.35, "C", 0, 0], 			// C0
						"13": [17.32, "C", 1, 0], 			// C#0 / Db0
						"14": [18.35, "D", 0, 0], 			// D0
						"15": [19.45, "E", -1, 0], 			// D#0 / Eb0
						"16": [20.60, "E", 0, 0], 			// E0
						"17": [21.83, "F", 0, 0], 			// F0
						"18": [23.12, "F", 1, 0], 			// F#0 / Gb0
						"19": [24.50, "G", 0, 0], 			// 0
						"20": [25.96, "A", -1, 0], 			// G#0 / Ab0
						"21": [27.50, "A", 0, 0], 			// A0
						"22": [29.14, "B", -1, 0], 			// A#0 / Bb0
						"23": [30.87, "B", 0, 0], 			// B0
					// octave 1
						"24": [32.70, "C", 0, 1], 			// C1
						"25": [34.65, "C", 1, 1], 			// C#1 / Db1
						"26": [36.71, "D", 0, 1], 			// D1
						"27": [38.89, "E", -1, 1], 			// D#1 / Eb1
						"28": [41.20, "E", 0, 1], 			// E1
						"29": [43.65, "F", 0, 1], 			// F1
						"30": [46.25, "F", 1, 1], 			// F#1 / Gb1
						"31": [49.00, "G", 0, 1], 			// 1
						"32": [51.91, "A", -1, 1], 			// G#1 / Ab1
						"33": [55.00, "A", 0, 1], 			// A1
						"34": [58.27, "B", -1, 1], 			// A#1 / Bb1
						"35": [61.74, "B", 0, 1], 			// B1
					// octave 2
						"36": [65.41, "C", 0, 2], 			// C2
						"37": [69.30, "C", 1, 2], 			// C#2 / Db2
						"38": [73.42, "D", 0, 2], 			// D2
						"39": [77.78, "E", -1, 2], 			// D#2 / Eb2
						"40": [82.41, "E", 0, 2], 			// E2
						"41": [87.31, "F", 0, 2], 			// F2
						"42": [92.50, "F", 1, 2], 			// F#2 / Gb2
						"43": [98.00, "G", 0, 2], 			// 2
						"44": [103.83, "A", -1, 2], 		// G#2 / Ab2
						"45": [110.00, "A", 0, 2], 			// A2
						"46": [116.54, "B", -1, 2], 		// A#2 / Bb2
						"47": [123.47, "B", 0, 2], 			// B2
					// octave 3
						"48": [130.81, "C", 0, 3], 			// C3
						"49": [138.59, "C", 1, 3], 			// C#3 / Db3
						"50": [146.83, "D", 0, 3], 			// D3
						"51": [155.56, "E", -1, 3], 		// D#3 / Eb3
						"52": [164.81, "E", 0, 3], 			// E3
						"53": [174.61, "F", 0, 3], 			// F3
						"54": [185.00, "F", 1, 3], 			// F#3 / Gb3
						"55": [196.00, "G", 0, 3], 			// G
						"56": [207.65, "A", -1, 3], 		// G#3 / Ab3
						"57": [220.00, "A", 0, 3], 			// A3
						"58": [233.08, "B", -1, 3], 		// A#3 / Bb3
						"59": [246.94, "B", 0, 3], 			// B3
					// octave 4
						"60": [261.63, "C", 0, 4], 			// C4
						"61": [277.18, "C", 1, 4], 			// C#4 / Db4
						"62": [293.67, "D", 0, 4], 			// D4
						"63": [311.13, "E", -1, 4], 		// D#4 / Eb4
						"64": [329.63, "E", 0, 4], 			// E4
						"65": [349.23, "F", 0, 4], 			// F4
						"66": [369.99, "F", 1, 4], 			// F#4 / Gb4
						"67": [392.00, "G", 0, 4], 			// G4
						"68": [415.30, "A", -1, 4], 		// G#4 / Ab4
						"69": [440.00, "A", 0, 4], 			// A4
						"70": [466.16, "B", -1, 4], 		// A#4 / Bb4
						"71": [493.88, "B", 0, 4], 			// B4
					// octave 5
						"72": [523.25, "C", 0, 5], 			// C5
						"73": [554.37, "C", 1, 5], 			// C#5 / Db5
						"74": [587.33, "D", 0, 5], 			// D5
						"75": [622.25, "E", -1, 5], 		// D#5 / Eb5
						"76": [659.25, "E", 0, 5], 			// E5
						"77": [698.46, "F", 0, 5], 			// F5
						"78": [739.99, "F", 1, 5], 			// F#5 / Gb5
						"79": [783.99, "G", 0, 5], 			// G5
						"80": [830.61, "A", -1, 5], 		// G#5 / Ab5
						"81": [880.00, "A", 0, 5], 			// A5
						"82": [932.33, "B", -1, 5], 		// A#5 / Bb5
						"83": [987.77, "B", 0, 5], 			// B5
					// octave 6
						"84": [1046.50, "C", 0, 6], 		// C6
						"85": [1108.73, "C", 1, 6], 		// C#6 / Db6
						"86": [1174.66, "D", 0, 6], 		// D6
						"87": [1244.51, "E", -1, 6], 		// D#6 / Eb6
						"88": [1318.51, "E", 0, 6], 		// E6
						"89": [1396.91, "F", 0, 6], 		// F6
						"90": [1479.98, "F", 1, 6], 		// F#6 / Gb6
						"91": [1567.98, "G", 0, 6], 		// G6
						"92": [1661.22, "A", -1, 6], 		// G#6 / Ab6
						"93": [1760.00, "A", 0, 6], 		// A6
						"94": [1864.66, "B", -1, 6], 		// A#6 / Bb6
						"95": [1975.53, "B", 0, 6], 		// B6
					// octave 7
						"96": [2093.00, "C", 0, 7], 		// C7
						"97": [2217.46, "C", 1, 7], 		// C#7 / Db7
						"98": [2349.32, "D", 0, 7], 		// D7
						"99": [2489.02, "E", -1, 7], 		// D#7 / Eb7
						"100":[2637.02, "E", 0, 7], 		// E7
						"101":[2793.83, "F", 0, 7], 		// F7
						"102":[2959.96, "F", 1, 7], 		// F#7 / Gb7
						"103":[3135.96, "G", 0, 7], 		// G7
						"104":[3322.44, "A", -1, 7], 		// G#7 / Ab7
						"105":[3520.00, "A", 0, 7], 		// A7
						"106":[3729.31, "B", -1, 7], 		// A#7 / Bb7
						"107":[3951.07, "B", 0, 7], 		// B7
					// octave 8
						"108":[4186.01, "C", 0, 8], 		// C8
						"109":[4434.92, "C", 1, 8], 		// C#8 / Db8
						"110":[4698.63, "D", 0, 8], 		// D8
						"111":[4978.03, "E", -1, 8], 		// D#8 / Eb8
						"112":[5274.04, "E", 0, 8], 		// E8
						"113":[5587.65, "F", 0, 8], 		// F8
						"114":[5919.91, "F", 1, 8], 		// F#8 / Gb8
						"115":[6271.93, "G", 0, 8], 		// G8
						"116":[6644.88, "A", -1, 8], 		// G#8 / Ab8
						"117":[7040.00, "A", 0, 8], 		// A8
						"118":[7458.62, "B", -1, 8], 		// A#8 / Bb8
						"119":[7902.13, "B", 0, 8], 		// B8
					// octave 9
						"120":[8372.02, "C", 0, 9], 		// C9
						"121":[8869.84, "C", 1, 9], 		// C#9 / Db9
						"122":[9397.26, "D", 0, 9], 		// D9
						"123":[9956.06, "E", -1, 9], 		// D#9 / Eb9
						"124":[10548.08, "E", 0, 9], 		// E9
						"125":[11175.30, "F", 0, 9], 		// F9
						"126":[11839.82, "F", 1, 9], 		// F#9 / Gb9
						"127":[12543.86, "G", 0, 9], 		// G9
						"128":[13289.76, "A", -1, 9], 		// G#9 / Ab9
						"129":[14080.00, "A", 0, 9], 		// A9
						"130":[14917.24, "B", -1, 9], 		// A#9 / Bb9
						"131":[15804.26, "B", 0, 9], 		// B9
					// octave 10
						"132":[16744.04, "C", 0, 10] 		// C10
				},
				intervals: {
					"0": ["U", "unison"],
					"1": ["m2", "minor second"],
					"2": ["M2", "major second"],
					"3": ["m3", "minor third"],
					"4": ["M3", "major third"],
					"5": ["P4", "perfect fourth"],
					"6": ["Tt", "tritone"],
					"7": ["P5", "perfect fifth"],
					"8": ["m6", "minor sixth"],
					"9": ["M6", "major sixth"],
					"10": ["m7", "minor seventh"],
					"11": ["M7", "major seventh"],
					"12": ["8ve", "octave"]
				}
			},
			activeInstrumentId: null,
			audio: null,
			master: null,
			noise: {
				white: null,
				pink: null,
				brown: null
			},
			reverb: null,
			midi: {
				system: null,
				controllers: {},
				consumers: {},
				sustained: {},
				pedal: null,
				connectDevice: null,
				disconnectDevice: null,
				pressKey: null,
				liftKey: null,
				pressPedal: null,
				liftPedal: null,
			},
			recorder: {
				data: [],
				mediaStreamDestination: null,
				mediaRecorder: null,
				download: false
			},
			instruments: [],
			simpleInstruments: {
				"sine": {
					"name": "sine",
					"type": "simple",
					"polysynth": {
						"0": true,
					},
					"imag": [0, 1]
				},
				"square": {
					"name": "square",
					"type": "simple",
					"polysynth": {
						"0": true,
					},
					"imag": [0, (1/1), 0, (1/3), 0, (1/5), 0, (1/7), 0, (1/9), 0, (1/11), 0, (1/13), 0, (1/15), 0, (1/17), 0, (1/19), 0, (1/21), 0, (1/23), 0, (1/25), 0, (1/27), 0, (1/29), 0, (1/31), 0],
				},
				"triangle": {
					"name": "triangle",
					"type": "simple",
					"polysynth": {
						"0": true,
					},
					"imag": [0, (1/1), 0, (1/9), 0, (1/25), 0, (1/49), 0, (1/81), 0, (1/121), 0, (1/169), 0, (1/225), 0, (1/289), 0, (1/361), 0, (1/441), 0, (1/529), 0, (1/625), 0, (1/729), 0, (1/841), 0, (1/961), 0],
				},
				"sawtooth": {
					"name": "sawtooth",
					"type": "simple",
					"polysynth": {
						"0": true,
					},
					"imag": [0, (1/1), (1/4), (1/9), (1/16), (1/25), (1/36), (1/49), (1/64), (1/81), (1/100), (1/121), (1/144), (1/169), (1/196), (1/225), (1/256), (1/289), (1/324), (1/361), (1/400), (1/441), (1/484), (1/529), (1/576), (1/625), (1/676), (1/729), (1/784), (1/841), (1/900), (1/961), (1/1024)],
				}
			},
			defaultInstruments: {
				"accordienne": {
					"name":"accordienne",
					"type": "reed",
					"polysynth":{
						"0":true
					},
					"noise":{
						"pink":0.07,
						"brown":0.12
					},
					"imag":[0,1,0.44293421506881714,0.32471582293510437,0.011000609025359154,0.17021837830543518,0.13372759521007538,0.11268258094787598,0.005569384433329105,0.1067923977971077,0.09378086030483246,0.08295878767967224,0.0006959254387766123,0.05424145981669426,0.0423087477684021,0.05841623246669769,0.023867418989539146,0.04862881824374199,0.046523261815309525,0.016646606847643852,0.04738473519682884,0.012283651158213615,0.021767525002360344,0.04069533571600914,0.01118484791368246,0.029461022466421127,0.024899769574403763,0.006698890123516321,0.01303438562899828,0.030736785382032394,0.002923727734014392,0.01851494237780571,0.020675845444202423],
					"envelope":{
						"attack":0.04006067500076161,
						"decay":0.9215120822558321,
						"sustain":0.5999866460488084,
						"release":0.029129186086711334
					},
					"echo":{
						"delay":0.005,
						"feedback":0.60
					}
				},
				"argit": {
					"name": "argit",
					"type": "guitar",
					"polysynth": {
						"0": true
					},
					"imag": [0,1,0.18338973820209503,0.13412705063819885,0.16505765914916992,0.05308644846081734,0.0630641058087349,0.03404829651117325,0.022229623049497604,0.04087919369339943,0.04073476791381836,0.038214970380067825,0.027402449399232864,0.008078854531049728,0.0028261858969926834,0.008908500894904137,0.0035800517071038485,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope": {
						"attack": 0.003,
						"decay": 1,
						"sustain": 0,
						"release": 0.8948628416772253
					},
					"filters": {
						"0": {
							"low": 4186.009044809578,
							"mid": 8372.018089619156,
							"high": 16744.036179238312,
							"type": "highshelf",
							"frequency": 4186.009044809578,
							"q": 0.6666666666666666,
							"gain": 10
						},
						"1": {
							"low": 8.175798915643707,
							"mid": 23.124651419477154,
							"high": 65.40639132514966,
							"type": "lowshelf",
							"frequency": 65.40639132514966,
							"q": 0.4040610178208844,
							"gain": -20
						}
					}
				},
				"ashbray":{
					"name":"ashbray",
					"type": "brass",
					"polysynth":{
						"0":true
					},
					"imag":[0,1,0.949999988079071,0.8999999761581421,0.8500000238418579,0.800000011920929,0.75,0.699999988079071,0.6499999761581421,0.6000000238418579,0.550000011920929,0.5,0.44999998807907104,0.4000000059604645,0.3499999940395355,0.30000001192092896,0.25,0.20000000298023224,0.15000000596046448,0.10000000149011612,0.09000000357627869,0.07999999821186066,0.07000000029802322,0.05999999865889549,0.05000000074505806,0.03999999910593033,0.029999999329447746,0.019999999552965164,0.009999999776482582,0.009999999776482582,0.009999999776482582,0.009999999776482582,0.009999999776482582],
					"envelope":{
						"attack":0.02,
						"decay":0.1,
						"sustain":0.7,
						"release":0.5
					},
					"echo":{
						"delay":0.02,
						"feedback":0.6
					}
				},
				"bariphone": {
					"name": "bariphone",
					"type": "reed",
					"polysynth": {
						"0": true
					},
					"noise": {
						"brown": 0.03
					},
					"imag": [0,0.5780699253082275,1,0.5756450295448303,0.7841851711273193,0.8666313290596008,0.2652597427368164,0.10036752372980118,0.15856477618217468,0.21191224455833435,0.30405789613723755,0.14644034206867218,0.03732050210237503,0.0567195862531662,0.09794263541698456,0.15129011869430542,0.17796385288238525,0.1609896570444107,0.1367408037185669,0.18523851037025452,0.11976660788059235,0.08581820875406265,0.05186981335282326,0.04459515959024429,0.038210369646549225,0.04217027127742767,0.03974538668990135,0.047020044177770615,0.013071647845208645,0.06641912460327148,0.016160927712917328,0.04217027127742767,0.04459515959024429],
					"envelope": {
						"attack": 0.025,
						"decay": 0.2,
						"sustain": 0.8,
						"release": 0.2
					},
					"filters": {
						"0": {
							"low": 2093.004522404789,
							"mid": 8372.018089619156,
							"high": 20000,
							"type": "highshelf",
							"frequency": 2093.004522404789,
							"q": 0.4675277938219182,
							"gain": -10
						}
					},
					"tremolo": {
						"depth": 0.05,
						"interval": 200,
						"wave": "sine",
					},
					"echo": {
						"delay": 0.02,
						"feedback": 0.4
					}
				},
				"bellissful": {
					"name":"bellissful",
					"type": "percussion",
					"polysynth":{
						"0":true
					},
					"imag":[0,0,0.04104885458946228,0.0010925550013780594,0.051037926226854324,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope":{
						"attack":0.001,
						"decay":1,
						"sustain":0,
						"release":1
					},
					"echo":{
						"delay":0.025,
						"feedback":0.6
					}
				},
				"bitbottle": {
					"name":"bitbottle",
					"type": "pipe",
					"polysynth":{
						"0":true
					},
					"noise":{
						"pink":0.1
					},
					"imag":[0,0.6603714823722839,0.021070703864097595,0.013578898273408413,0.021070703864097595,0.01857343502342701,0.013578898273408413,0.013578898273408413,0.11346964538097382,0.028562510386109352,0.028562510386109352,0.02356797270476818,0.008584360592067242,0.02356797270476818,0.013578898273408413,0.004352819640189409,0.7377867698669434,0.003064535791054368,0.008955108001828194,0.03705715760588646,0.005810053087770939,0.0037432725075632334,0.0017459229566156864,0.021535523235797882,0.028468528762459755,0.034860700368881226,0.004610554315149784,0.018958428874611855,0.0022687807213515043,0.014749004505574703,0.007059432100504637,0.01009814627468586,0.05852973461151123],
					"envelope":{
						"attack":0.1,
						"decay":1,
						"sustain":0,
						"release":1
					},
					"filters":{
						"0":{
							"low":2093.004522404789,
							"mid":8372.018089619156,
							"high":20000,
							"type":"highshelf",
							"frequency":2093.004522404789,
							"q":0.4675277938219182,
							"gain":-50
						}
					},
					"echo":{
						"delay":0.028701891715590344,
						"feedback":0.7277977212423912
					}
				},
				"boombash": {
					"name":"boombash",
					"type": "percussion",
					"polysynth":{},
					"noise":{
						"brown":1,
						"pink":1
					},
					"imag":[0,0],
					"envelope":{
						"attack":0.001,
						"decay":0.15,
						"sustain":0,
						"release":1
					},
					"filters":{
						"0":{
							"low":8.175798915643707,
							"mid":46.24930283895431,
							"high":261.6255653005986,
							"type":"lowshelf",
							"frequency":261.6255653005986,
							"q":0.1824791693384639,
							"gain":25
						},
						"1":{
							"low":1046.5022612023945,
							"mid":4186.009044809578,
							"high":16744.036179238312,
							"type":"highshelf",
							"frequency":1046.5022612023945,
							"q":0.26666666666666666,
							"gain":-10
						},
						"2":{
							"low":65.40639132514966,
							"mid":184.99721135581723,
							"high":523.2511306011972,
							"type":"peaking",
							"frequency":184.99721135581723,
							"q":0.4040610178208844,
							"gain":10
						}
					},
					"echo":{
						"delay":0.035,
						"feedback":0.25
					}
				},
				"bowsaw":{
					"name":"bowsaw",
					"type": "string",
					"polysynth":{
						"0":true,
						"-12":true
					},
					"imag":[0,1,0.23404590785503387,0.15211033821105957,0.142105832695961,0.037102051079273224,0.09601913392543793,0.12448015064001083,0.07319405674934387,0.011639612726867199,0.09405945241451263,0.01200729887932539,0.07927504181861877,0.05457581207156181,0.05331254005432129,0.005395286250859499,0.0026925401762127876,0.027428166940808296,0.04367822781205177,0.04133171588182449,0.045733492821455,0.013625760562717915,0.012657934799790382,0.005503012798726559,0.006074216216802597,0.028866447508335114,0.02051301673054695,0.01495913416147232,0.0029398882761597633,0.004925342742353678,0.020460767671465874,0.012299998663365841,0.02198159135878086],
					"envelope":{
						"attack":0.05,
						"decay":0.19396874983572676,
						"sustain":0.47725710163460633,
						"release":0.5686379494583103
					},
					"bitcrusher":{
						"bits":2,
						"norm":0.5972198769315127
					},
					"filters":{
						"0":{
							"low":1046.9676501513159,
							"mid":4182.288415298123,
							"high":16706.854682863304,
							"type":"highshelf",
							"frequency":1046.9676501513159,
							"q":0.26707015233007286,
							"gain":-18.19511769072885
						},
						"1":{
							"low":16.28629779398394,
							"mid":32.57259558796789,
							"high":65.14519117593582,
							"type":"lowshelf",
							"frequency":65.14519117593582,
							"q":0.6666666666666661,
							"gain":-22.9464168740993
						}
					},
					"echo":{
						"delay":0.017219503353271704,
						"feedback":0.6718588097032427
					},
				},
				"buzzorgan": {
					"name":"buzzorgan",
					"type": "keyboard",
					"polysynth":{
						"0":true,
						"12":true,
						"-12":true
					},
					"imag":[0,1,0.10000000149011612,0,0.009999999776482582,0,0,0,0.0010000000474974513,0,0,0,0,0,0,0,0.00009999999747378752,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000009999999747378752],
					"envelope":{
						"attack":0.23591836734693875,
						"decay":0.9772734693877552,
						"sustain":0.5715527734307078,
						"release":1
					},
					"bitcrusher":{
						"bits":1,
						"norm":0.5
					},
					"filters":{
						"0":{
							"low":8.175798915643707,
							"mid":23.124651419477154,
							"high":65.40639132514966,
							"type":"lowshelf",
							"frequency":65.40639132514966,
							"q":0.4040610178208844,
							"gain":-40
						},
						"1":{
							"low":2093.004522404789,
							"mid":8372.018089619156,
							"high":20000,
							"type":"highshelf",
							"frequency":2093.004522404789,
							"q":0.4675277938219182,
							"gain":-50
						}
					}
				},
				"cantarus": {
					"name": "cantarus",
					"type": "voice",
					"polysynth": {
						"0": true
					},
					"vibrato": {
						"active": true,
						"wave": "sine",
						"pitch": 5,
						"interval": 250
					},
					"noise": {
						"pink": 0.03,
						"brown": 0.03,
						"white": 0.01
					},
					"imag": [0,1,1,0.5080381035804749,0.2533166706562042,0.08849695324897766,0.04854065924882889,0.03605431690812111,0.02356797270476818,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope": {
						"attack": 0.03,
						"decay": 0.5,
						"sustain": 0.8,
						"release": 1
					},
					"filters": {
						"0": {
							"low": 2093.004522404789,
							"mid": 5919.910763386151,
							"high": 16744.036179238312,
							"type": "highshelf",
							"frequency": 2093.004522404789,
							"q": 0.4040610178208844,
							"gain": -20
						}
					},
					"tremolo": {
						"depth": 0.05,
						"interval": 50,
						"wave": "sine",
					},
					"echo": {
						"delay": 0.01,
						"feedback": 0.7
					}
				},
				"chordstrum": {
					"name":"chordstrum",
					"type": "guitar",
					"polysynth":{
						"0":true,
						"-5":true,
						"-12":true
					},
					"noise":{
						"brown":0.08951406649616368
					},
					"imag":[0,1,0.17831625044345856,0.46575266122817993,0.2041115015745163,0.4126817286014557,0.10914841294288635,0.060591064393520355,0.08364199101924896,0.02575693279504776,0.01693502813577652,0.05870021879673004,0.0666189193725586,0.05404908210039139,0.06647317111492157,0.03880130127072334,0.053111664950847626,0.051343005150556564,0,0.0007156424107961357,0.014325405471026897,0.015581578016281128,0.010473430156707764,0,0,0,0,0,0.0028332876972854137,0,0,0,0],
					"envelope":{
						"attack":0.005265295838668044,
						"decay":1,
						"sustain":0,
						"release":1
					},
					"echo":{
						"delay":0.0010553957105702905,
						"feedback":0.8857754774228093
					}
				},
				"clarinaut": {
					"name":"clarinaut",
					"type": "reed",
					"polysynth":{
						"0":true
					},
					"imag":[0,1,0.04185762256383896,0.8109787106513977,0.10051940381526947,0.6024035215377808,0.08422446250915527,0.42967715859413147,0.06467054039239883,0.23087890446186066,0.03859863430261612,0.11029636114835739,0.03859863430261612,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope":{
						"attack":0.05228819184417878,
						"decay":0.14524497734494107,
						"sustain":0.8291752914260813,
						"release":0.08699322990920816
					},
					"filters":{
						"0":{
							"low":18.312373638581303,
							"mid":37.21396757355336,
							"high":75.625334535975,
							"gain":-50
						},
					},
					"echo":{
						"delay":0.04212744274441215,
						"feedback":0.3480771325852489
					}
				},
				"consona": {
					"name":"consona",
					"type": "keyboard",
					"polysynth":{
						"0":true
					},
					"vibrato":{
						"active":true,
						"wave":"sine",
						"pitch":10,
						"interval":100
					},
					"imag":[0,1,0.5028985142707825,0.07854355126619339,0.047020044177770615,0.0688440129160881,0.06399424374103546,0.05186981335282326,0.019999999552965164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope":{
						"attack":0.0015,
						"decay":1,
						"sustain":0.01,
						"release":1
					},
					"filters":{
						"0":{
							"low":8.175798915643707,
							"mid":23.124651419477154,
							"high":65.40639132514966,
							"type":"lowshelf",
							"frequency":65.40639132514966,
							"q":0.4040610178208844,
							"gain":-10
						},
						"1":{
							"low":8.175798915643707,
							"mid":16.351597831287414,
							"high":32.70319566257483,
							"type":"lowshelf",
							"frequency":32.70319566257483,
							"q":0.6666666666666666,
							"gain":-20
						},
						"2":{
							"low":4186.009044809578,
							"mid":8372.018089619156,
							"high":16744.036179238312,
							"type":"highshelf",
							"frequency":4186.009044809578,
							"q":0.6666666666666666,
							"gain":-20
						}
					}
				},
				"cymbilant": {
					"name":"cymbilant",
					"type": "percussion",
					"polysynth":{},
					"noise":{
						"white":0.25,
						"pink":0.25
					},
					"imag":[0,0],
					"envelope":{
						"attack":0.0001,
						"decay":1,
						"sustain":0,
						"release":0
					},
					"filters":{
						"0":{
							"low":2093.004522404789,
							"mid":8372.018089619156,
							"high":20000,
							"type":"highshelf",
							"frequency":2093.004522404789,
							"q":0.4675277938219182,
							"gain":10
						},
						"1":{
							"low":8.175798915643707,
							"mid":65.40639132514966,
							"high":523.2511306011972,
							"type":"peaking",
							"frequency":65.40639132514966,
							"q":0.12698412698412698,
							"gain":-10
						},
						"2":{
							"low":523.2511306011972,
							"mid":1479.9776908465378,
							"high":4186.009044809578,
							"type":"peaking",
							"frequency":1479.9776908465378,
							"q":0.4040610178208844,
							"gain":5
						}
					},
					"echo":{
						"delay":0.05,
						"feedback":0.5
					}
				},
				"darkflute": {
					"name":"darkflute",
					"type": "pipe",
					"polysynth":{
						"0":true,
						"7":true
					},
					"noise":{
						"white":0.1
					},
					"imag":[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope":{
						"attack":0.9681919358212048,
						"decay":0.9372387264087787,
						"sustain":0.8797216541216758,
						"release":0.3691070734990474
					},
					"filters":{
						"0":{
							"low":4861.69725806286,
							"mid":8906.515668158989,
							"high":16316.528392549255,
							"gain":-43.064876957494405
						}
					},
					"echo":{
						"delay":0.4607913227432864,
						"feedback":0.4463562957226408
					}
				},
				"ensnarl":{
					"name":"ensnarl",
					"type": "percussion",
					"polysynth":{},
					"noise":{
						"pink":0.5,
						"white":1,
						"brown":0.5
					},
					"imag":[0,0],
					"envelope":{
						"attack":0.005,
						"decay":0.125,
						"sustain":0,
						"release":1
					},
					"filters":{
						"0":{
							"low":130.8127826502993,
							"mid":261.6255653005986,
							"high":523.2511306011972,
							"type":"peaking",
							"frequency":261.6255653005986,
							"q":0.6666666666666666,
							"gain":20
						},
						"1":{
							"low":8.175798915643707,
							"mid":46.24930283895431,
							"high":261.6255653005986,
							"type":"lowshelf",
							"frequency":261.6255653005986,
							"q":0.1824791693384639,
							"gain":10
						},
						"2":{
							"low":1046.5022612023945,
							"mid":4186.009044809578,
							"high":16744.036179238312,
							"type":"highshelf",
							"frequency":1046.5022612023945,
							"q":0.26666666666666666,
							"gain":-10
						}
					},
					"echo":{
						"delay":0.03,
						"feedback":0.2
					}
				},
				"estrorcha": {
					"name":"estrorcha",
					"type": "string",
					"polysynth":{
						"0":true
					},
					"vibrato":{
						"active":true,
						"wave":"sine",
						"pitch":15,
						"interval":250
					},
					"noise":{
						"pink":0.05,
						"brown":0.05
					},
					"imag":[0,0.8874203562736511,0.1295931190252304,0.20315755903720856,0.16292069852352142,0.10984145849943161,0.11577275395393372,0.0980217382311821,0.04745087772607803,0.05612877011299133,0.04626862332224846,0.01921742409467697,0.0671650618314743,0.04446854442358017,0.011415340937674046,0.06422305852174759,0.043835777789354324,0.04096030443906784,0.04101203382015228,0.048137012869119644,0.037398431450128555,0.03662402555346489,0.01821613870561123,0.04218064993619919,0.008371297270059586,0.007837610319256783,0.018631432205438614,0.03486699238419533,0.01330649759620428,0.014677741564810276,0.02004636451601982,0.01507441233843565,0.026194047182798386],
					"envelope":{
						"attack":0.1,
						"decay":0.6,
						"sustain":0.5,
						"release":0.6
					},
					"filters":{
						"0":{
							"low":4167.4508152457975,
							"mid":8484.362122493127,
							"high":17273.005445500476,
							"type":"highshelf",
							"frequency":4167.4508152457975,
							"q":0.647386727373342,
							"gain":-25.458398019552718
						}
					},
					"tremolo":{
						"wave":"sine",
						"depth":0.2,
						"interval":250
					},
					"echo":{
						"delay":0.01,
						"feedback":0.5
					},
					"chorus":15
				},
				"fuzzillade": {
					"name":"fuzzillade",
					"type": "guitar",
					"polysynth": {
						"0":true,
						"-12":true
					},
					"noise":{
						"white":0.1,
						"brown":0.1,
					},
					"imag":[0,1,0.2721260190010071,0.1634569764137268,0.20843380689620972,0.17615669965744019,0.038680654019117355,0.08300412446260452,0.0912071168422699,0.05134723335504532,0.03261181712150574,0.006951713934540749,0.06389429420232773,0.02962232194840908,0.01340870838612318,0.020696712657809258,0.017252037301659584,0.032719820737838745,0.016309291124343872,0.03520479425787926,0.028209438547492027,0.03530978783965111,0.0028287721797823906,0.04293005168437958,0.013352521695196629,0.002816961845383048,0.014206286519765854,0.017066607251763344,0.022002283483743668,0.010360535234212875,0.023887373507022858,0.03119545988738537,0.01103762537240982],
					"envelope":{
						"attack":0.04,
						"decay":0.05,
						"sustain":0.5547617247616123,
						"release":0.7796304747231637
					},
					"bitcrusher":{
						"bits":4,
						"norm":0.2
					},
					"filters":{
						"0":{
							"low":16.351597831287414,
							"mid":46.208168929038116,
							"high":130.58019759322892,
							"type":"lowshelf",
							"frequency":130.58019759322892,
							"q":0.4045236396606315,
							"gain":10
						},
						"1":{
							"low":1047.4338438800266,
							"mid":4187.871795707915,
							"high":16744.036179238312,
							"type":"highshelf",
							"frequency":1047.4338438800266,
							"q":0.26680116538814797,
							"gain":-15.98113016788475
						}
					},
					"echo":{
						"delay":0.028701891715590344,
						"feedback":0.4805169030357534
					}
				},
				"glassical": {
					"name":"glassical",
					"type": "keyboard",
					"polysynth":{
						"0":true,
						"-12":true
					},
					"imag":[0,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
					"envelope":{
						"attack":0.007199265381083561,
						"decay":0.8632627074186466,
						"sustain":0,
						"release":1
					},
					"filters":{
						"0":{
							"low":2093.004522404789,
							"mid":8372.018089619156,
							"high":20000,
							"type":"highshelf",
							"frequency":2093.004522404789,
							"q":0.4675277938219182,
							"gain":-25
						}
					},
					"echo":{
						"delay":0.01,
						"feedback":0.5
					}
				},
				"grandom": {
					"name":"grandom",
					"type": "string",
					"polysynth":{
						"0":true,
						"4":true,
						"12":true,
						"-12":true
					},
					"imag":[0,0.721911609172821,0.22894950211048126,0.1103050485253334,0.14229194819927216,0.10458331555128098,0.0919058620929718,0.07546842843294144,0.09562256932258606,0.027763359248638153,0.062183670699596405,0.07542411983013153,0.011985196731984615,0.012504768557846546,0.004302314482629299,0.05776180326938629,0.03201861307024956,0.05758839100599289,0.054847992956638336,0.037664223462343216,0.04996206611394882,0.002214206149801612,0.002233667764812708,0.000567441456951201,0.012271360494196415,0.022757047787308693,0.026075439527630806,0.006997788790613413,0.013459333218634129,0.012593359686434269,0.02936272881925106,0.02424924448132515,0.012654461897909641],
					"envelope":{
						"attack":0.01,
						"decay":0.5,
						"sustain":0,
						"release":0
					},
					"bitcrusher":{
						"bits":1,
						"norm":0.1736879552069015
					},
					"filters":{
						"0":{
							"low":262.9353533631721,
							"mid":525.8707067263447,
							"high":1051.7414134526903,
							"type":"peaking",
							"frequency":525.8707067263447,
							"q":0.6666666666666657,
							"gain":10
						},
						"1":{
							"low":2088.8278302707904,
							"mid":4177.655660541579,
							"high":8355.311321083149,
							"type":"highshelf",
							"frequency":2088.8278302707904,
							"q":0.6666666666666677,
							"gain":5
						}
					},
					"tremolo":{
						"wave":"sine",
						"depth":0.006,
						"interval":154
					},
					"reverb":1
				},
				"hermanico": {
					"name":"hermanico",
					"type": "reed",
					"polysynth":{
						"12":true
					},
					"noise":{
						"pink":0.1,
						"brown":0.2
					},
					"imag":[0,0.8825923204421997,0.05503871291875839,0.24861495196819305,0.016217639669775963,0.1394181102514267,0.08311229944229126,0.1344422698020935,0.0980064645409584,0.04095985367894173,0.0821826159954071,0.05785004794597626,0.06559411436319351,0.06909625977277756,0.006454214453697205,0.03660145029425621,0.04250609874725342,0.045627348124980927,0.02087404392659664,0.014729636721313,0.04205738380551338,0.002473647240549326,0.010658258572220802,0.033695682883262634,0.03393666073679924,0.020598161965608597,0.028835810720920563,0.03316494822502136,0.02083248272538185,0.006201272830367088,0.0308681707829237,0.0003706399875227362,0.019239867106080055],
					"envelope":{
						"attack":0.04,
						"decay":0.10313497708060669,
						"sustain":0.5059240056019745,
						"release":0.18518241706511507
					},
					"filters":{
						"0":{
							"low":489.83850206221183,
							"mid":920.7448276571835,
							"high":1730.7153971938808,
							"type":"peaking",
							"frequency":920.7448276571835,
							"q":0.7420114205281286,
							"gain":-18.63681506705982
						}
					},
					"echo":{
						"delay":0.020208604954367666,
						"feedback":0.281792412534462
					}
				},
				"honeyharp": {
					"name": "honeyharp",
					"type": "string",
					"polysynth":{
						"0":true
					},
					"noise":{
						"brown":0.07771135781383433
					},
					"imag":[0,1,0,0.2178429514169693,0,0.14940421283245087,0,0.1158275306224823,0.3807923495769501,0.08310726284980774,0.0001470343122491613,0.05094950646162033,0,0.012528758496046066,0,0.030789503827691078,0,0.036400504410266876,0.0427282489836216,0.0037623702082782984,0.007912619970738888,0.0005064468132331967,0,0.003089423757046461,0,0.014406030997633934,0.019122179597616196,0.03117973357439041,0.00888627115637064,0.03448168560862541,0.0077970088459551334,0.029125453904271126,0.022520482540130615],
					"envelope":{
						"attack":0.008811254291446448,
						"decay":1,
						"sustain":0,
						"release":1
					},
					"filters":{
						"0":{
							"low":822.8462713537634,
							"mid":8221.107072310962,
							"high":20000,
							"gain":-25
						},
						"1":{
							"low":2390.278220900194,
							"mid":10548.081821211836,
							"high":20000,
							"gain":-25
						}
					},
					"echo":{
						"delay":0.00835524908457173,
						"feedback":0.7594509205795837
					}
				},
				"hornithologist": {
					"name": "hornithologist",
					"type": "brass",
					"polysynth": {
						"0": true,
						"-12": true
					},
					"vibrato": {
						"active": true,
						"wave": "sine",
						"pitch": 10,
						"interval": 10
					},
					"imag": [0,1,1,0.24832214415073395,0.11846417933702469,0.05852973461151123,0.02356797270476818,0.011081629432737827,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope": {
						"attack": 0.0764509758117607,
						"decay": 0.11008940516893541,
						"sustain": 0.920087404401436,
						"release": 0.352299687825182
					},
					"filters": {
						"0": {
							"low": 2093.004522404789,
							"mid": 8372.018089619156,
							"high": 20000,
							"type": "highshelf",
							"frequency": 2093.004522404789,
							"q": 0.4675277938219182,
							"gain": -25
						},
						"1": {
							"low": 16.351597831287414,
							"mid": 65.40639132514966,
							"high": 261.6255653005986,
							"type": "peaking",
							"frequency": 65.40639132514966,
							"q": 0.26666666666666666,
							"gain": -10
						}
					},
					"chorus": 25,
				},
				"jangle": {
					"name":"jangle",
					"type": "sfx",
					"polysynth": {
						"0":true,
						"12":true,
						"-12":true
					},
					"imag":[0,1,0,0,0,0,0,0,0.46878501772880554,0,0,0,0,0,0,0,0.341684490442276,0,0,0,0,0,0,0,0.09400142729282379,0,0,0,0,0,0,0,0.21132497489452362],
					"envelope":{
						"attack":0.0024277414605824318,
						"decay":0.2568350031240243,
						"sustain":0,
						"release":0.870276277426606
					},
					"filters":{
						"0":{
							"low":9.92437152514077,
							"mid":32.91541662897909,
							"high":109.16808677654838,
							"gain":-20.072992700729927
						}
					},
					"echo":{
						"delay":0.07412233349465767,
						"feedback":0.6897265497330863
					}
				},
				"jellybanjo": {
					"name":"jellybanjo",
					"type": "guitar",
					"polysynth":{
						"0":true
					},
					"imag":[0,1,0.9577524662017822,0.8558614253997803,0.4383566975593567,0.4085349142551422,0.376228004693985,0.1674756407737732,0.14759445190429688,0.13516871631145477,0.05564400181174278,0.04570341482758522,0,0.04570341482758522,0,0.015881644561886787,0,0.02333708666265011,0,0.03576282411813736,0,0.013396497815847397,0,0.013396497815847397,0,0.013396497815847397,0,0.008426202461123466,0,0.018366791307926178,0,0.010911350138485432,0],
					"envelope":{
						"attack":0.005,
						"decay":1,
						"sustain":0,
						"release":0
					},
					"echo":{
						"delay":0.02,
						"feedback":0.5
					}
				},
				"keystone": {
					"name":"keystone",
					"type": "keyboard",
					"polysynth":{
						"0":true
					},
					"imag":[0,0.20000000298023224,1,0.029999999329447746,0.05000000074505806,0.02356797270476818,0.021070703864097595,0.038551583886146545,0.019999999552965164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope":{
						"attack":0.005,
						"decay":1,
						"sustain":0.01,
						"release":1
					},
					"filters":{
						"0":{
							"low":8.175798915643707,
							"mid":23.124651419477154,
							"high":65.40639132514966,
							"type":"lowshelf",
							"frequency":65.40639132514966,
							"q":0.4040610178208844,
							"gain":-10
						},
						"1":{
							"low":8.175798915643707,
							"mid":16.351597831287414,
							"high":32.70319566257483,
							"type":"lowshelf",
							"frequency":32.70319566257483,
							"q":0.6666666666666666,
							"gain":-20
						},
						"2":{
							"low":8372.018089619156,
							"mid":16744.036179238312,
							"high":20000,
							"type":"highshelf",
							"frequency":8372.018089619156,
							"q":1.4399778317757896,
							"gain":-30
						}
					},
					"echo":{
						"delay":0.04,
						"feedback":0.2
					}
				},
				"lazerz": {
					"name": "lazerz",
					"type": "sfx",
					"polysynth":{
						"0":true
					},
					"imag":[0,1,0.43981871008872986,0.19477427005767822,0.16363249719142914,0.04059608280658722,0.05547327548265457,0.08984045684337616,0.02408204786479473,0.05339190736413002,0.0810762494802475,0.049579720944166183,0.004129277542233467,0.06980492174625397,0.011852550320327282,0.011417913250625134,0.05199107900261879,0.0462377704679966,0.011805979534983635,0.041976239532232285,0.04228879511356354,0.03486672788858414,0.03639288619160652,0.005501041188836098,0.018338866531848907,0.004767595790326595,0.02615637518465519,0.016462303698062897,0.018449874594807625,0.03333821892738342,0.03183285519480705,0.022049419581890106,0.020332850515842438],
					"envelope":{
						"attack":0.0103,
						"decay":0.6066113351908449,
						"sustain":0.2795546993048945,
						"release":0.2983127072001239
					},
					"filters":{
						"0":{
							"low":42.73771657635709,
							"mid":74.15621598227193,
							"high":128.6719274995506,
							"gain":19.39672225311667
						},
						"1":{
							"low":2236.228485250351,
							"mid":3672.0056804902356,
							"high":6029.627923303666,
							"gain":-14.155259381494123
						}
					},
					"bitcrusher":{
						"bits":1,
						"norm":0.9476107287222466
					},
					"echo":{
						"delay":0.05,
						"feedback":0.2748267474475922
					}
				},
				"lowdium": {
					"name": "lowdium",
					"type": "guitar",
					"polysynth": {
						"-12": true
					},
					"noise": {
						"brown": 0.05,
						"pink": 0.05
					},
					"imag": [0,1,0.9577524662017822,0.8558614253997803,0.4383566975593567,0.4085349142551422,0.376228004693985,0.1674756407737732,0.14759445190429688,0.13516871631145477,0.05564400181174278,0.04570341482758522,0,0.04570341482758522,0,0.015881644561886787,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope": {
						"attack": 0.005,
						"decay": 0.05,
						"sustain": 0.6,
						"release": 1
					},
					"echo": {
						"delay": 0.02,
						"feedback": 0.5
					},
					"distortion": 5.711986642890532,
					"chorus": 10,
				},
				"mayrimba": {
					"name":"mayrimba",
					"type": "percussion",
					"polysynth":{
						"0":true
					},
					"imag":[0,1,0.06102700158953667,0.0010925550013780594,0.1684095561504364,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope":{
						"attack":0.001,
						"decay":1,
						"sustain":0,
						"release":1
					},
					"echo":{
						"delay":0.03,
						"feedback":0.6
					}
				},
				"meltmallet": {
					"name":"meltmallet",
					"type": "percussion",
					"polysynth":{
						"0":true
					},
					"imag":[0,0,1,0,0.6528796553611755,0,0,0,0.18089589476585388,0,0.0001470343122491613,0.05094950646162033,0,0.012528758496046066,0,0.030789503827691078,0.15092867612838745,0.036400504410266876,0.0427282489836216,0.0037623702082782984,0.007912619970738888,0.0005064468132331967,0,0.003089423757046461,0,0.014406030997633934,0.019122179597616196,0.03117973357439041,0.00888627115637064,0.03448168560862541,0.0077970088459551334,0.029125453904271126,0.08599968999624252],
					"envelope":{
						"attack":0.001,
						"decay":1,
						"sustain":0,
						"release":0
					},
					"filters":{
						"0":{
							"low":2093.004522404789,
							"mid":5919.910763386151,
							"high":16744.036179238312,
							"type":"highshelf",
							"frequency":2093.004522404789,
							"q":0.4040610178208844,
							"gain":-40
						},
						"1":{
							"low":16.351597831287414,
							"mid":32.70319566257483,
							"high":65.40639132514966,
							"type":"lowshelf",
							"frequency":65.40639132514966,
							"q":0.6666666666666666,
							"gain":-10
						}
					},
					"echo":{
						"delay":0.02,
						"feedback":0.7
					}
				},
				"mockarina": {
					"name":"mockarina",
					"type": "pipe",
					"polysynth":{
						"12":true
					},
					"noise":{
						"pink":0.01
					},
					"imag":[0,0.5,0.75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope":{
						"attack":0.07,
						"decay":0.3,
						"sustain":0.75,
						"release":0.3
					},
					"filters":{
						"0":{
							"low":8.175798915643707,
							"mid":46.24930283895431,
							"high":261.6255653005986,
							"type":"lowshelf",
							"frequency":261.6255653005986,
							"q":0.1824791693384639,
							"gain":-30
						},
						"1":{
							"low":8372.018089619156,
							"mid":16744.036179238312,
							"high":20000,
							"type":"highshelf",
							"frequency":8372.018089619156,
							"q":1.4399778317757896,
							"gain":-10
						}
					},
					"echo":{
						"delay":0.03,
						"feedback":0.7
					}
				},
				"nimbusnotes": {
					"name": "nimbusnotes",
					"type": "percussion",
					"polysynth": {
						"0":true
					},
					"imag":[0,1],
					"envelope":{
						"attack":0.005,
						"decay":1,
						"sustain":0,
						"release":0
					}
				},
				"nonsemble": {
					"name": "nonsemble",
					"type": "string",
					"polysynth": {
						"0": true
					},
					"vibrato": {
						"active": true,
						"wave": "sine",
						"pitch": 10,
						"interval": 250
					},
					"noise": {
						"pink": 0.05,
						"brown": 0.05
					},
					"imag": [0,0.8874203562736511,0.1295931190252304,0.20315755903720856,0.16292069852352142,0.10984145849943161,0.11577275395393372,0.0980217382311821,0.04745087772607803,0.05612877011299133,0.04626862332224846,0.01921742409467697,0.0671650618314743,0.04446854442358017,0.011415340937674046,0.06422305852174759,0.043835777789354324,0.04096030443906784,0.04101203382015228,0.048137012869119644,0.037398431450128555,0.03662402555346489,0.01821613870561123,0.04218064993619919,0.008371297270059586,0.007837610319256783,0.018631432205438614,0.03486699238419533,0.01330649759620428,0.014677741564810276,0.02004636451601982,0.01507441233843565,0.026194047182798386],
					"envelope": {
						"attack": 0.1,
						"decay": 0.6,
						"sustain": 0.5,
						"release": 0.6
					},
					"filters": {
						"0": {
							"low": 4167.4508152457975,
							"mid": 8484.362122493127,
							"high": 17273.005445500476,
							"type": "highshelf",
							"frequency": 4167.4508152457975,
							"q": 0.647386727373342,
							"gain": -25.458398019552718
						}
					},
					"echo": {
						"delay": 0.02,
						"feedback": 0.5
					},
					"chorus": 20,
					"reverb": 1,
				},
				"particcolo":{
					"name":"particcolo",
					"type": "pipe",
					"polysynth":{
						"0":true
					},
					"noise":{
						"pink":0.01,
						"brown":0.01
					},
					"imag":[0,0,0.75,0.0010925550013780594,0.21336038707663494,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope":{
						"attack":0.08,
						"decay":0.3,
						"sustain":0.8,
						"release":0.5
					},
					"filters":{
						"0":{
							"low":4186.009044809578,
							"mid":11839.821526772303,
							"high":20000,
							"type":"highshelf",
							"frequency":4186.009044809578,
							"q":0.7486928227239356,
							"gain":5
						}
					},
					"echo":{
						"delay":0.03,
						"feedback":0.4
					}
				},
				"pipepad": {
					"name":"pipepad",
					"type": "keyboard",
					"polysynth": {
						"0":true,
						"12":true
					},
					"imag":[0,0.33562183380126953,0.6109020113945007,0.1744801104068756,0.09404638409614563,0.07281248271465302,0.0915573388338089,0.02150915376842022,0.0853821188211441,0.10350412130355835,0.07266827672719955,0.08902092278003693,0.43355804681777954,0.0031595886684954166,0.05492638051509857,0.009794807061553001,0.053827643394470215,0.04052245244383812,0.0023047751747071743,0.009134497493505478,0.003136951941996813,0.040616050362586975,0.015174685046076775,0.015443396754562855,0.036237023770809174,0.0044108182191848755,0.004686694126576185,0.004756764974445105,0.010029036551713943,0.003516408847644925,0.026952527463436127,0.01701277121901512,0.02771703340113163],
					"envelope":{
						"attack":0.05,
						"decay":0.01,
						"sustain":0.65,
						"release":0.6
					},
					"filters":{
						"0":{
							"low":32.70319566257483,
							"mid":65.40639132514966,
							"high":130.8127826502993,
							"type":"peaking",
							"frequency":65.40639132514966,
							"q":0.6666666666666666,
							"gain":-15
						},
						"1":{
							"low":2093.004522404789,
							"mid":5919.910763386151,
							"high":16744.036179238312,
							"type":"highshelf",
							"frequency":2093.004522404789,
							"q":0.4040610178208844,
							"gain":-25
						}
					},
					"echo":{
						"delay":0.1,
						"feedback":0.2
					}
				},
				"qube": {
					"name":"qube",
					"type": "sfx",
					"polysynth":{
						"0":true,
						"12":true
					},
					"imag":[0,1,0,0.1111111119389534,0,0.03999999910593033,0,0.020408162847161293,0,0.012345679104328156,0,0.00826446246355772,0,0.005917159840464592,0,0.004444444552063942,0,0.0034602077212184668,0,0.002770083025097847,0,0.0022675737272948027,0,0.0018903592135757208,0,0.0015999999595806003,0,0.0013717421097680926,0,0.0011890606256201863,0,0.0010405827779322863,0],
					"envelope":{
						"attack":0.01061524334251607,
						"decay":0.11725436179981635,
						"sustain":0.4491774703126702,
						"release":0.22923783287419647
					},
					"echo":{
						"delay":0.00032741056024983945,
						"feedback":0.3829393180084976
					}
				},
				"randolin": {
					"name":"randolin",
					"type": "guitar",
					"polysynth": {
						"0":true
					},
					"imag":[0,1,0.16875877976417542,0.07101190835237503,0.13254764676094055,0.11018283665180206,0.05039362609386444,0.056428223848342896,0.1020343154668808,0.10569997876882553,0.08224548399448395,0.030915070325136185,0.0723150372505188,0.0027549313381314278,0.013039435259997845,0.003925666678696871,0.004136265721172094,0.0042406534776091576,0.0008384122047573328,0.010557533241808414,0.03953870013356209,0.03006448782980442,0.02172408439218998,0.007239776663482189,0.004996773321181536,0.02772033028304577,0.00030931454966776073,0.01587240770459175,0.006464128848165274,0.02789974771440029,0.00049134052824229,0.025921806693077087,0.01809745840728283],
					"envelope":{
						"attack":0.01336064807804993,
						"decay":1,
						"sustain":0,
						"release":0
					},
					"echo":{
						"delay":0.01886847063108421,
						"feedback":0.30896902265439863
					}
				},
				"rechoirment": {
					"name": "rechoirment",
					"type": "voice",
					"polysynth": {
						"0": true
					},
					"vibrato": {
						"active": true,
						"wave": "sine",
						"pitch": 5,
						"interval": 200
					},
					"noise": {
						"pink": 0.03,
						"brown": 0.03,
						"white": 0.01
					},
					"imag": [0,0.5,1,0.25,0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope": {
						"attack": 0.05,
						"decay": 0.5,
						"sustain": 0.8,
						"release": 1
					},
					"filters": {
						"0": {
							"low": 2093.004522404789,
							"mid": 5919.910763386151,
							"high": 16744.036179238312,
							"type": "highshelf",
							"frequency": 2093.004522404789,
							"q": 0.4040610178208844,
							"gain": -30
						}
					},
					"tremolo": {
						"depth": 0.05,
						"interval": 250,
						"wave": "sine",
					},
					"chorus": 20
				},
				"reedles": {
					"name": "reedles",
					"type": "reed",
					"polysynth":{
						"0":true
					},
					"imag":[0,1,0.13321591913700104,0.23890696465969086,0.1848037987947464,0.06213591620326042,0.15851031243801117,0.013016369193792343,0.05386565998196602,0.11070278286933899,0.046062078326940536,0.05860947445034981,0.07818899303674698,0.017279257997870445,0.02893548458814621,0.019652292132377625,0.006511820014566183,0.026842080056667328,0.029128052294254303,0.04828658327460289,0.026606278494000435,0.043067075312137604,0.02284008078277111,0.03200739622116089,0.038210369646549225,0.03194240480661392,0.007605026010423899,0.011232322081923485,0.02774462290108204,0.0024622941855341196,0.016160927712917328,0.026034902781248093,0.0009380421251989901],
					"envelope":{
						"attack":0.036862935925353835,
						"decay":0.18700753813155746,
						"sustain":0.730133889758303,
						"release":0.16572433174364076
					},
					"filters":{
						"0":{
							"low":17.00523847135155,
							"mid":34.791076828746036,
							"high":71.1791856928607,
							"gain":10
						},
						"1":{
							"low":4556.987960311114,
							"mid":9167.496497936349,
							"high":18442.662735044294,
							"gain":-22.335246044166226
						}
					},
					"bitcrusher":{
						"bits":8,
						"norm":0.9295249065172435
					},
					"echo":{
						"delay":0.04787234042553192,
						"feedback":0.16714675029034326
					}
				},
				"reverbassoon": {
					"name":"reverbassoon",
					"type": "reed",
					"polysynth":{
						"-12":true
					},
					"noise":{
						"pink":0.1
					},
					"imag":[0,0.9051038026809692,0.24841533601284027,0.29958122968673706,0.20493479073047638,0.3503422439098358,0.44310909509658813,0.3976353406906128,0.7752458453178406,0.6528796553611755,0.6154206395149231,0.36029869318008423,0.2233976423740387,0.1586807668209076,0.07069320231676102,0.004352819640189409,0.009285477921366692,0.003064535791054368,0.008955108001828194,0.03705715760588646,0.005810053087770939,0.0037432725075632334,0.0017459229566156864,0.021535523235797882,0.028468528762459755,0.034860700368881226,0.004610554315149784,0.018958428874611855,0.0022687807213515043,0.014749004505574703,0.007059432100504637,0.01009814627468586,0.01717371866106987],
					"envelope":{
						"attack":0.06851366561192636,
						"decay":0.11884578994122286,
						"sustain":0.1435082459058059,
						"release":0.38568980002281045
					},
					"filters":{
						"0":{
							"low":2089.283161491664,
							"mid":5914.6456229168825,
							"high":16744.036179238312,
							"type":"highshelf",
							"frequency":2089.283161491664,
							"q":0.40359913372503453,
							"gain":-24.512441156691324
						}
					},
					"echo":{
						"delay":0.028701891715590344,
						"feedback":0.7775590316733918
					}
				},
				"shamosan": {
					"name": "shamosan",
					"type": "guitar",
					"polysynth": {
						"0": true
					},
					"vibrato": {
						"active": true,
						"wave": "sine",
						"pitch": 2,
						"interval": 500
					},
					"imag": [0,0,0,0,1,0.9199787974357605,0.886030375957489,0.9175539016723633,1,0.9127041101455688,0.8520820140838623,0.9005796909332275,0.8642064332962036,0.7478119134902954,0.5004736185073853,0.24343575537204742,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope": {
						"attack": 0.01,
						"decay": 1,
						"sustain": 0,
						"release": 1
					},
					"filters": {
						"0": {
							"low": 4186.009044809578,
							"mid": 11839.821526772303,
							"high": 20000,
							"type": "highshelf",
							"frequency": 4186.009044809578,
							"q": 0.7486928227239356,
							"gain": -10
						}
					},
					"tremolo": {
						"depth": 0.1,
						"interval": 100,
						"wave": "sine",
					},
					"echo": {
						"delay": 0.01,
						"feedback": 0.5
					},
					"chorus": 2
				},
				"sharpsichord": {
					"name":"sharpsichord",
					"type":"keyboard",
					"polysynth":{
						"0":true,
						"12":true
					},
					"imag":[0,0.8299999833106995,0.9800000190734863,0.33000001311302185,0.5,0.20000000298023224,0.12999999523162842,0.10000000149011612,0.6600000262260437,0.4399999976158142,0.3799999952316284,0.47999998927116394,0.2199999988079071,0.019999999552965164,0.07000000029802322,0.27000001072883606,0.28999999165534973,0.25,0.10000000149011612,0.10999999940395355,0.009999999776482582,0.1599999964237213,0.44999998807907104,0.18000000715255737,0.30000001192092896,0.05000000074505806,0.029999999329447746,0.009999999776482582,0.10000000149011612,0.05000000074505806,0.20000000298023224,0.23000000417232513,0.05000000074505806],
					"envelope":{
						"attack":0.005,
						"decay":1,
						"sustain":0,
						"release":1
					},
					"filters":{
						"0":{
							"low":1046.5022612023945,
							"mid":4186.009044809578,
							"high":16744.036179238312,
							"type":"highshelf",
							"frequency":1046.5022612023945,
							"q":0.26666666666666666,
							"gain":-15
						}
					},
					"echo":{
						"delay":0.02,
						"feedback":0.7
					}
				},
				"shimmer": {
					"name": "shimmer",
					"type": "sfx",
					"polysynth": {
						"0": true,
						"12": true
					},
					"imag": [0, (1/1), 0, (1/3), 0, (1/5), 0, (1/7), 0, (1/9), 0, (1/11), 0, (1/13), 0, (1/15), 0, (1/17), 0, (1/19), 0, (1/21), 0, (1/23), 0, (1/25), 0, (1/27), 0, (1/29), 0, (1/31), 0],
					"noise": {
						"white": 0.2,
					},
					"envelope": {
						"attack": 0.01,
						"decay": 0.6,
						"sustain": 0,
						"release": 0
					},
					"bitcrusher": {
						"bits": 64,
						"norm": 0.5
					},
					"filters": {
						"0": {
							"low":  3.2445679498433218,
							"mid":  32.70319566257483,
							"high": 329.6275569128699,
							"gain": -10
						},
						"1": {
							"low":  1046.5022612023945,
							"mid":  10548.081821211836,
							"high": 106318.00258046597,
							"gain": -20
						}
					},
					"echo": {
						"delay": 0.08,
						"feedback": 0.7
					}
				},
				"shring": {
					"name": "shring",
					"type": "sfx",
					"polysynth": {
						"0": true
					},
					"vibrato": {
						"active": true,
						"wave": "sawtooth",
						"pitch": 200,
						"interval": 500
					},
					"imag": [0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope": {
						"attack": 0.2,
						"decay": 0,
						"sustain": 1,
						"release": 0.3
					}
				},
				"snacksifolk": {
					"name":"snacksifolk",
					"type": "reed",
					"polysynth":{
						"0":true
					},
					"noise":{
						"brown":0.1
					},
					"imag":[0,1,0.2721260190010071,0.1634569764137268,0.20843380689620972,0.17615669965744019,0.038680654019117355,0.08300412446260452,0.0912071168422699,0.05134723335504532,0.03261181712150574,0.006951713934540749,0.06389429420232773,0.02962232194840908,0.01340870838612318,0.020696712657809258,0.017252037301659584,0.032719820737838745,0.016309291124343872,0.03520479425787926,0.028209438547492027,0.03530978783965111,0.0028287721797823906,0.04293005168437958,0.013352521695196629,0.002816961845383048,0.014206286519765854,0.017066607251763344,0.022002283483743668,0.010360535234212875,0.023887373507022858,0.03119545988738537,0.01103762537240982],
					"envelope":{
						"attack":0.035,
						"decay":0.05,
						"sustain":0.5547617247616123,
						"release":0.7796304747231637
					},
					"filters":{
						"0":{
							"low":15.676117886588871,
							"mid":45.31416586706765,
							"high":130.98738112864083,
							"type":"lowshelf",
							"frequency":130.98738112864083,
							"q":0.3929725908209666,
							"gain":10.25678680820711
						},
						"1":{
							"low":2081.867406910767,
							"mid":5904.139495446471,
							"high":16744.036179238312,
							"type":"highshelf",
							"frequency":2081.867406910767,
							"q":0.40267845685895887,
							"gain":-14.716989048797885
						}
					},
					"echo":{
						"delay":0.00651890482398957,
						"feedback":0.4805169030357534
					}
				},
				"soulvation": {
					"name": "soulvation",
					"type": "keyboard",
					"polysynth": {
						"0": true
					},
					"vibrato": {
						"active": true,
						"wave": "sine",
						"pitch": 10,
						"interval": 150
					},
					"noise": {
						"brown": 0.1
					},
					"imag": [0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope": {
						"attack": 0.1,
						"decay": 1,
						"sustain": 0.5,
						"release": 1
					},
					"echo": {
						"delay": 0.1,
						"feedback": 0.5
					},
					"chorus": 30
				},
				"spritzicato": {
					"name":"spritzicato",
					"type": "string",
					"polysynth": {
						"-12":true
					},
					"vibrato":{
						"active":true,
						"wave":"sine",
						"pitch":10,
						"interval":50
					},
					"noise": {
						"brown": 0.2
					},
					"imag":[0,0,1,0.03999999910593033,0.30000001192092896,0.019999999552965164,0.029999999329447746,0.019999999552965164,0.05000000074505806,0.020346304401755333,0.020346304401755333,0.015496533364057541,0.008221876807510853,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope":{
						"attack":0.01,
						"decay":0.25,
						"sustain":0,
						"release":1
					},
					"filters":{
						"0":{
							"low":1046.5022612023945,
							"mid":4186.009044809578,
							"high":16744.036179238312,
							"type":"highshelf",
							"frequency":1046.5022612023945,
							"q":0.26666666666666666,
							"gain":-25
						}
					},
					"reverb":0.03
				},
				"swello": {
					"name":"swello",
					"type": "string",
					"polysynth":{
						"-12":true
					},
					"noise":{
						"brown":0.1
					},
					"imag":[0,1,0.3432779610157013,0.2315126657485962,0.058497168123722076,0.1899126172065735,0.0448404885828495,0.12938399612903595,0.07931369543075562,0.054060198366642,0.0988508090376854,0.0522669218480587,0.056811220943927765,0.051076728850603104,0.032383546233177185,0.004351383075118065,0.04818083345890045,0.038509003818035126,0.014789948239922523,0.006924794986844063,0.034774232655763626,0.009429270401597023,0.003623893717303872,0.0258589219301939,0.0015618279576301575,0.022793792188167572,0.01324266754090786,0.007655204273760319,0.0041127512231469154,0.022874318063259125,0.016309715807437897,0.008302805945277214,0.008340908214449883],
					"envelope":{
						"attack":0.2,
						"decay":0.4,
						"sustain":0.6,
						"release":0.8
					},
					"echo":{
						"delay":0.009965899510513269,
						"feedback":0.7489922649526092
					}
				},
				"telephex": {
					"name": "telephex",
					"type": "sfx",
					"polysynth": {
						"0": true
					},
					"vibrato": {
						"active": true,
						"wave": "square",
						"pitch": 100,
						"interval": 100
					},
					"imag": [0,1,0,0.3333333432674408,0,0.20000000298023224,0,0.1428571492433548,0,0.1111111119389534,0,0.09090909361839294,0,0.07692307978868484,0,0.06666667014360428,0,0.05882352963089943,0,0.05263157933950424,0,0.0476190485060215,0,0.043478261679410934,0,0.03999999910593033,0,0.03703703731298447,0,0.03448275849223137,0,0.032258063554763794,0],
					"envelope": {
						"attack": 0.01,
						"decay": 0.1,
						"sustain": 0.5,
						"release": 0.1
					}
				},
				"tenoir": {
					"name": "tenoir",
					"type": "reed",
					"polysynth": {
						"-12": true
					},
					"vibrato": {
						"active": true,
						"wave": "sine",
						"pitch": 5,
						"interval": 200
					},
					"imag": [0,0,0.11550000309944153,0.3416999876499176,0.17890000343322754,0.12319999933242798,0.06780000030994415,0.04729999974370003,0.026000000536441803,0.0044999998062849045,0.0020000000949949026,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope": {
						"attack": 0.03,
						"decay": 0.1,
						"sustain": 0.7,
						"release": 0.5
					},
					"echo": {
						"delay": 0.02,
						"feedback": 0.6
					}
				},
				"theremonster": {
					"name": "theremonster",
					"type": "sfx",
					"polysynth": {
						"0": true
					},
					"vibrato": {
						"active": true,
						"wave": "sine",
						"pitch": 50,
						"interval": 200
					},
					"imag": [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope": {
						"attack": 0.2,
						"decay": 0.2,
						"sustain": 0.8,
						"release": 0.4
					},
					"tremolo": {
						"depth": 0.1,
						"interval": 50,
						"wave": "sine",
					},
					"distortion": 5.711986642890532
				},
				"thumpano": {
					"name":"thumpano",
					"type": "percussion",
					"polysynth":{
						"-24":true
					},
					"vibrato":{
						"active":true,
						"wave":"sine",
						"pitch":10,
						"interval":50
					},
					"noise":{
						"pink":1,
						"brown":1,
						"white":1
					},
					"imag":[0,0,1,0.5028985142707825,0.5053234100341797,0.5028985142707825,0.3768044412136078,0.35013070702552795,0.42045238614082336,0.27010950446128845,0.23131133615970612,0.2046375870704651,0.13189102709293365,0.14401546120643616,0.1027924045920372,0.10036752372980118,0.06399424374103546,0.020346304401755333,0.022771188989281654,0.027620960026979446,0.008221876807510853,0.020346304401755333,0.017921417951583862,0.005796991754323244,0.022771188989281654,0.013071647845208645,0.03489561751484871,0.022771188989281654,0.020346304401755333,0.03247072920203209,0.017921417951583862,0.020346304401755333,0.005796991754323244],
					"envelope":{
						"attack":0.005,
						"decay":1,
						"sustain":0,
						"release":0
					},
					"filters":{
						"0":{
							"low":523.2511306011972,
							"mid":2093.004522404789,
							"high":8372.018089619156,
							"type":"peaking",
							"frequency":2093.004522404789,
							"q":0.26666666666666666,
							"gain":-35
						},
						"1":{
							"low":65.40639132514966,
							"mid":184.99721135581723,
							"high":523.2511306011972,
							"type":"peaking",
							"frequency":184.99721135581723,
							"q":0.4040610178208844,
							"gain":10
						},
						"2":{
							"low":1046.5022612023945,
							"mid":4186.009044809578,
							"high":16744.036179238312,
							"type":"highshelf",
							"frequency":1046.5022612023945,
							"q":0.26666666666666666,
							"gain":-35
						},
						"3":{
							"low":16.351597831287414,
							"mid":46.24930283895431,
							"high":130.8127826502993,
							"type":"lowshelf",
							"frequency":130.8127826502993,
							"q":0.4040610178208844,
							"gain":10
						},
						"4":{
							"low":2093.004522404789,
							"mid":8372.018089619156,
							"high":20000,
							"type":"highshelf",
							"frequency":2093.004522404789,
							"q":0.4675277938219182,
							"gain":-35
						}
					},
					"tremolo":{
						"wave":"sine",
						"depth":0.1,
						"interval":100
					},
					"reverb":0.1
				},
				"trimpot": {
					"name": "trimpot",
					"type": "brass",
					"polysynth": {
						"0": true
					},
					"vibrato": {
						"active": true,
						"wave": "sine",
						"pitch": 10,
						"interval": 10
					},
					"imag": [0,0,0.8918918967247009,0.9729729890823364,1,0.7027027010917664,0.35135141015052795,0.27027028799057007,0.21621620655059814,0.18918919563293457,0.1621621996164322,0.0810810998082161,0.0810810998082161,0.07000000029802322,0.05999999865889549,0.05000000074505806,0.03999999910593033,0.029999999329447746,0.019999999552965164,0.009999999776482582,0.004999999888241291,0.004999999888241291,0.004999999888241291,0.004999999888241291,0.004999999888241291,0.0024999999441206455,0.0024999999441206455,0.0024999999441206455,0.0024999999441206455,0.0024999999441206455,0.0024999999441206455,0.0024999999441206455,0.0024999999441206455],
					"envelope": {
						"attack": 0.02,
						"decay": 0.1,
						"sustain": 1,
						"release": 0.5
					},
					"reverb": 0.1
				},
				"trombus": {
					"name":"trombus",
					"type": "brass",
					"polysynth":{
						"0":true
					},
					"noise":{
						"brown":0.01
					},
					"imag":[0,1,0.4980490207672119,0.24832214415073395,0.11846417933702469,0.05852973461151123,0.02356797270476818,0.011081629432737827,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope":{
						"attack":0.0764509758117607,
						"decay":0.11008940516893541,
						"sustain":0.920087404401436,
						"release":0.352299687825182
					},
					"filters":{
						"0":{
							"low":2076.045897957098,
							"mid":5948.878373921389,
							"high":17046.42173014274,
							"type":"highshelf",
							"frequency":2076.045897957098,
							"q":0.3973766885084851,
							"gain":5.188122152859798
						},
						"1":{
							"low":14.879039355946865,
							"mid":59.710151101422674,
							"high":239.61910841574203,
							"type":"lowshelf",
							"frequency":239.61910841574203,
							"q":0.26568538201141145,
							"gain":-8.849333558292557
						}
					},
					"echo":{
						"delay":0.03076923076923077,
						"feedback":0.4031528016232246
					}
				},
				"underseep": {
					"name": "underseep",
					"type": "sfx",
					"polysynth":{
						"0":true,
						"12":true
					},
					"imag":[0,1,0.3213120102882385,0.2774433195590973,0.011021449230611324,0.01404001284390688,0.0006878199055790901,0.03247099369764328,0.03869893401861191,0.09622026234865189,0.0321379154920578,0.06449630111455917,0.02757621556520462,0.02349603734910488,0.03819667175412178,0.055925361812114716,0.031162837520241737,0.0023747377563267946,0.0011247359216213226,0.026810549199581146,0.033752020448446274,0.009248711168766022,0.031557273119688034,0.032972175627946854,0.03257177025079727,0.026090048253536224,0.013911527581512928,0.01111803948879242,0.001483236439526081,0.018287574872374535,0.021726204082369804,0.026707740500569344,0.021846726536750793],
					"envelope":{
						"attack":0.005,
						"decay":0.15,
						"sustain":0,
						"release":0.75
					},
					"filters":{
						"0":{
							"low":2093.004522404789,
							"mid":8372.018089619156,
							"high":20000,
							"type":"highshelf",
							"frequency":2093.004522404789,
							"q":0.4675277938219182,
							"gain":-30
						}
					},
					"echo":{
						"delay":0.05,
						"feedback":0.8
					}
				},
				"voxelle": {
					"name": "voxelle",
					"type": "voice",
					"polysynth": {
						"0": true
					},
					"vibrato": {
						"active": true,
						"wave": "sine",
						"pitch": 5,
						"interval": 250
					},
					"noise": {
						"pink": 0.03,
						"brown": 0.03,
						"white": 0.01
					},
					"imag": [0,0,1,0,0.5097826719284058,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope": {
						"attack": 0.05,
						"decay": 0.5,
						"sustain": 0.8,
						"release": 1
					},
					"filters": {
						"0": {
							"low": 2093.004522404789,
							"mid": 5919.910763386151,
							"high": 16744.036179238312,
							"type": "highshelf",
							"frequency": 2093.004522404789,
							"q": 0.4040610178208844,
							"gain": -30
						}
					},
					"tremolo": {
						"depth": 0.1,
						"interval": 250,
						"wave": "sine",
					},
					"echo": {
						"delay": 0,
						"feedback": 0.7
					}
				},
				"vyol": {
					"name":"vyol",
					"type": "string",
					"polysynth":{
						"12":true
					},
					"noise":{
						"pink":0.05
					},
					"imag":[0,0.8874203562736511,0.1295931190252304,0.20315755903720856,0.16292069852352142,0.10984145849943161,0.11577275395393372,0.0980217382311821,0.04745087772607803,0.05612877011299133,0.04626862332224846,0.01921742409467697,0.0671650618314743,0.04446854442358017,0.011415340937674046,0.06422305852174759,0.043835777789354324,0.04096030443906784,0.04101203382015228,0.048137012869119644,0.037398431450128555,0.03662402555346489,0.01821613870561123,0.04218064993619919,0.008371297270059586,0.007837610319256783,0.018631432205438614,0.03486699238419533,0.01330649759620428,0.014677741564810276,0.02004636451601982,0.01507441233843565,0.026194047182798386],
					"envelope":{
						"attack":0.2,
						"decay":0.6,
						"sustain":0.5,
						"release":0.6
					},
					"filters":{
						"0":{
							"low":4143.198440031739,
							"mid":11857.221458531772,
							"high":20000,
							"type":"highshelf",
							"frequency":4143.198440031739,
							"q":0.747768799003341,
							"gain":-9.883355011958209
						}
					},
					"echo":{
						"delay":0.02,
						"feedback":0.5
					}
				},
				"warpal": {
					"name": "warpal",
					"type": "sfx",
					"polysynth": {
						"0": true
					},
					"vibrato": {
						"active": true,
						"wave": "triangle",
						"pitch": 50,
						"interval": 200
					},
					"imag": [0,1,0.5,0.1111111119389534,0.10000000149011612,0.03999999910593033,0,0.020408162847161293,0,0.012345679104328156,0,0.00826446246355772,0,0.005917159840464592,0,0.004444444552063942,0,0.0034602077212184668,0,0.002770083025097847,0,0.0022675737272948027,0,0.0018903592135757208,0,0.0015999999595806003,0,0.0013717421097680926,0,0.0011890606256201863,0,0.0010405827779322863,0],
					"envelope": {
						"attack": 0.01,
						"decay": 0.2,
						"sustain": 0.5,
						"release": 0.5
					},
					"tremolo": {
						"depth": 0.25,
						"interval": 100,
						"wave": "sine",
					},
					"distortion": 5.711986642890532,
					"chorus": 20
				},
				"wavecore": {
					"name": "wavecore",
					"type": "guitar",
					"polysynth": {
						"0": true
					},
					"noise": {
						"brown": 0.15
					},
					"imag": [0,1,0.75,0.5877695083618164,0.43985146284103394,0.39377865195274353,0.379229336977005,0.25798508524894714,0.07854355126619339,0.15613988041877747,0.07611867040395737,0.05429469794034958,0.04459515959024429,0.03732050210237503,0.03247072920203209,0.030045844614505768,0.025196075439453125,0.020346304401755333,0.017921417951583862,0.017921417951583862,0.010646762326359749,0.015496533364057541,0.015496533364057541,0.017921417951583862,0.013071647845208645,0,0,0,0,0,0,0,0],
					"envelope": {
						"attack": 0.01,
						"decay": 0.1,
						"sustain": 0.8,
						"release": 1
					},
					"tremolo": {
						"depth": 0.25,
						"interval": 200,
						"wave": "sine",
					},
					"echo": {
						"delay": 0.005,
						"feedback": 0.5
					},
					"distortion": 9.139178628624853,
					"chorus": 20
				},
				"whissile": {
					"name": "whissile",
					"type": "pipe",
					"polysynth": {
						"-12": true
					},
					"vibrato": {
						"active": true,
						"wave": "sine",
						"pitch": 50,
						"interval": 200
					},
					"noise": {
						"brown": 0.05
					},
					"imag": [0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					"envelope": {
						"attack": 0.05,
						"decay": 0.1,
						"sustain": 0.5,
						"release": 0.1
					},
					"tremolo": {
						"depth": 0.2,
						"interval": 50,
						"wave": "sine",
					}
				},
				"zipboard": {
					"name":"zipboard",
					"type": "keyboard",
					"polysynth": {
						"0":true,
						"12":true
					},
					"imag":[0,1,0.2469734251499176,0.002976407762616873,0.16500729322433472,0.1631493717432022,0.006283351685851812,0.06217874214053154,0.12171376496553421,0.005290979985147715,0.078001968562603,0.06913785636425018,0.00888859387487173,0.00039055573870427907,0.05901888385415077,0.054893858730793,0.01904197968542576,0.0032623414881527424,0.03901148959994316,0.02713780105113983,0.035767827183008194,0.018263455480337143,0.016943002119660378,0.004188771825283766,0.01903744600713253,0.01300036534667015,0.021625585854053497,0.010731637477874756,0.020787563174962997,0.020557072013616562,0.0007718194392509758,0.0048711118288338184,0.017420852556824684],
					"envelope":{
						"attack":0.009410607540294214,
						"decay":0.44725215499143944,
						"sustain":0.401,
						"release":0.08178365890825967
					},
					"filters":{
						"0":{
							"low":34.125975815066454,
							"mid":65.66928214169573,
							"high":126.36868291694998,
							"type":"peaking",
							"frequency":65.66928214169573,
							"q":0.7119184183218189,
							"gain":-6.144721203974623
						},
						"1":{
							"low":2030.360059499887,
							"mid":3919.369788449322,
							"high":7565.879493508692,
							"type":"peaking",
							"frequency":3919.369788449322,
							"q":0.7080401099072517,
							"gain":-17.696246580186724
						}
					},
					"echo":{
						"delay":0.15,
						"feedback":0.25
					}
				},
				"ziplimba": {
					"name":"ziplimba",
					"type": "sfx",
					"polysynth": {
						"0":true,
						"12":true
					},
					"imag":[0,1,0.2469734251499176,0.002976407762616873,0.16500729322433472,0.1631493717432022,0.006283351685851812,0.06217874214053154,0.12171376496553421,0.005290979985147715,0.078001968562603,0.06913785636425018,0.00888859387487173,0.00039055573870427907,0.05901888385415077,0.054893858730793,0.01904197968542576,0.0032623414881527424,0.03901148959994316,0.02713780105113983,0.035767827183008194,0.018263455480337143,0.016943002119660378,0.004188771825283766,0.01903744600713253,0.01300036534667015,0.021625585854053497,0.010731637477874756,0.020787563174962997,0.020557072013616562,0.0007718194392509758,0.0048711118288338184,0.017420852556824684],
					"envelope":{
						"attack":0.005,
						"decay":0.44725215499143944,
						"sustain":0,
						"release":0.2
					},
					"filters":{
						"0":{
							"low":34.125975815066454,
							"mid":65.66928214169573,
							"high":126.36868291694998,
							"type":"peaking",
							"frequency":65.66928214169573,
							"q":0.7119184183218189,
							"gain":-6.144721203974623
						},
						"1":{
							"low":2030.360059499887,
							"mid":3919.369788449322,
							"high":7565.879493508692,
							"type":"peaking",
							"frequency":3919.369788449322,
							"q":0.7080401099072517,
							"gain":-17.696246580186724
						}
					},
					"echo":{
						"delay":0.15,
						"feedback":0.25
					}
				}
			},
			// https://github.com/cwilso/WebAudio
			impulseResponse: `data:audio/ogg;base64,`
		}
		window.AUDIO_J = AUDIO_J

/*** helpers ***/
	/* getNote */
		AUDIO_J.getNote = getNote
		function getNote(midi) {
			try {
				// no midi or invalid
					if (!midi || isNaN(midi) || Number(midi % 1)) {
						return null
					}

				// from dictionary
					return AUDIO_J.constants.notes[String(midi)] || null
			} catch (error) {console.log(error)}
		}

	/* convertMidiToHz */
		AUDIO_J.convertMidiToHz = convertMidiToHz
		function convertMidiToHz(midi) {
			try {
				// no midi or invalid
					if (!midi || isNaN(midi)) {
						return null
					}

				// calculate
					return Math.pow(2, (midi - AUDIO_J.constants.tuningAMidi) / AUDIO_J.constants.semitonesPerOctave) * AUDIO_J.constants.tuningAHz
			} catch (error) {console.log(error)}
		}

	/* convertHzToMidi */
		AUDIO_J.convertHzToMidi = convertHzToMidi
		function convertHzToMidi(hz) {
			try {
				// no Hz or invalid
					if (!hz || isNaN(hz)) {
						return null
					}

				// calculate
					return AUDIO_J.constants.semitonesPerOctave * Math.log2(hz / AUDIO_J.constants.tuningAHz) + AUDIO_J.constants.tuningAMidi
			} catch (error) {console.log(error)}
		}

/*** buildAudio ***/
	/* buildAudio */
		AUDIO_J.buildAudio = buildAudio
		function buildAudio() {
			try {
				// audio context
					AUDIO_J.audio = new (window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.oAudioContext || window.msAudioContext)()
					const now = (AUDIO_J.audio.currentTime || 0)

				// master volume
					AUDIO_J.master = AUDIO_J.audio.createGain()
					AUDIO_J.master.connect(AUDIO_J.audio.destination)
					AUDIO_J.master.gain.setValueAtTime(1, now)

				// recorder
					buildRecorder()

				// noise
					buildNoise()

				// load reverb
					fetch(AUDIO_J.impulseResponse).then(function(response) {
						response.arrayBuffer().then(function(buffer) {
							AUDIO_J.audio.decodeAudioData(buffer).then(function(data) {
								AUDIO_J.reverb = data

								for (let i in AUDIO_J.instruments) {
									AUDIO_J.instruments[i].nodes.reverb.buffer = AUDIO_J.reverb
								}
							})
						})
					})
			} catch (error) {console.log(error)}
		}

	/* buildNoise */
		function buildNoise() {
			try {
			// white
				AUDIO_J.noise.white = AUDIO_J.audio.createScriptProcessor(AUDIO_J.constants.bufferCount, 1, 1)
				AUDIO_J.noise.white.onaudioprocess = function(event) {
					const output = event.outputBuffer.getChannelData(0)
					
					for (let i = 0; i < AUDIO_J.constants.bufferCount; i++) {
						output[i] = Math.random() * 2 - 1
					}
				}

			// brown
				AUDIO_J.noise.brown = AUDIO_J.audio.createScriptProcessor(AUDIO_J.constants.bufferCount, 1, 1)
				AUDIO_J.noise.brown.onaudioprocess = function(event) {
					const output = event.outputBuffer.getChannelData(0)
					let lastOut = 0.0

					for (let i = 0; i < AUDIO_J.constants.bufferCount; i++) {
						output[i] = (lastOut + (0.02 * (Math.random() * 2 - 1))) / 1.02
						lastOut = output[i]
						output[i] *= 3.5
					}
				}

			// pink
				AUDIO_J.noise.pink = AUDIO_J.audio.createScriptProcessor(AUDIO_J.constants.bufferCount, 1, 1)
				AUDIO_J.noise.pink.onaudioprocess = function(event) {
					const output = event.outputBuffer.getChannelData(0)
					
					let b0,  b1,  b2,  b3,  b4,  b5,  b6
						b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0
					for (let i = 0; i < AUDIO_J.constants.bufferCount; i++) {
						var random = Math.random() * 2 - 1
						b0 = 0.99886 * b0 + random * 0.0555179
						b1 = 0.99332 * b1 + random * 0.0750759
						b2 = 0.96900 * b2 + random * 0.1538520
						b3 = 0.86650 * b3 + random * 0.3104856
						b4 = 0.55000 * b4 + random * 0.5329522
						b5 = -0.7616 * b5 - random * 0.0168980
						output[i] = (b0 + b1 + b2 + b3 + b4 + b5 + b6 + random * 0.5362) * 0.11
						b6 = random * 0.115926
					}
				}
			} catch (error) {console.log(error)}
		}	

/*** instruments ***/
	/* buildInstrument */
		AUDIO_J.buildInstrument = buildInstrument
		function buildInstrument(parameters) {
			try {
				// parameters & nodes
					const now = AUDIO_J.audio.currentTime || 0
					const instrument = {
						parameters: {
							polysynth:    {},
							vibrato:      {
								active:   false,
								wave:     null,
								pitch:    0,
								interval: 0
							},
							noise:        {},
							imag:         new Float32Array(1 + AUDIO_J.constants.harmonicsCount),
							real:         new Float32Array(1 + AUDIO_J.constants.harmonicsCount),
							wave:         null,
							envelope: {
								attack:   0,
								decay:    0,
								sustain:  1,
								release:  0,
							},
							bitcrusher: {
								bits:     0,
								norm:     0
							},
							filters:      {},
							tremolo: {
								wave:     null,
								depth:    0,
								interval: 0
							},
							echo: {
								delay:    0,
								feedback: 0
							},
							distortion:   0,
							chorus:       0,
							reverb:       0,
							compressor: {
								threshold:0,
								knee:     AUDIO_J.constants.defaultCompressorKnee,
								ratio:    1,
								attack:   0,
								release:  0
							},
							panning: 0
						},
						notes: [],
						nodes: {
							noise:         {},
							vibratoOsc:    AUDIO_J.audio.createOscillator(),
							vibratoGain:   AUDIO_J.audio.createGain(),
							effectsIn:     AUDIO_J.audio.createGain(),
							bitcrusherIn:  AUDIO_J.audio.createGain(),
							bitcrusher:    AUDIO_J.audio.createScriptProcessor(AUDIO_J.constants.bufferCount, 1, 1),
							bitcrusherOut: AUDIO_J.audio.createGain(),
							filterIn:      AUDIO_J.audio.createGain(),
							filters:       {},
							filterOut:     AUDIO_J.audio.createGain(),
							tremoloOsc:    AUDIO_J.audio.createOscillator(),
							tremoloGain:   AUDIO_J.audio.createGain(),
							tremoloThrough:AUDIO_J.audio.createGain(),
							echoIn:        AUDIO_J.audio.createGain(),
							delay:         AUDIO_J.audio.createDelay(),
							feedback:      AUDIO_J.audio.createGain(),
							echoOut:       AUDIO_J.audio.createGain(),
							distortionIn:  AUDIO_J.audio.createGain(),
							distortionBy:  AUDIO_J.audio.createGain(),
							distortion:    AUDIO_J.audio.createWaveShaper(),
							distortionFrom:AUDIO_J.audio.createGain(),
							distortionOut: AUDIO_J.audio.createGain(),
							reverbIn:      AUDIO_J.audio.createGain(),
							reverbBy:      AUDIO_J.audio.createGain(),
							reverbTo:      AUDIO_J.audio.createGain(),
							reverb:        AUDIO_J.audio.createConvolver(),
							reverbOut:     AUDIO_J.audio.createGain(),
							compressorIn:  AUDIO_J.audio.createGain(),
							compressorBy:  AUDIO_J.audio.createGain(),
							compressorTo:  AUDIO_J.audio.createGain(),
							compressor:    AUDIO_J.audio.createDynamicsCompressor(),
							compressorOut: AUDIO_J.audio.createGain(),
							volume:        AUDIO_J.audio.createGain(),
							panner:        AUDIO_J.audio.createStereoPanner(),
							power:         AUDIO_J.audio.createGain()
						},
						currentVolume: 0.5,
						currentPower:  1
					}

				// wave (for tone oscillators)
					instrument.parameters.imag[1] = 1
					instrument.parameters.wave = AUDIO_J.audio.createPeriodicWave(instrument.parameters.real, instrument.parameters.imag)

				// noise
					for (let color in AUDIO_J.noise) {
						instrument.nodes.noise[color] = AUDIO_J.audio.createGain()
						instrument.nodes.noise[color].gain.setValueAtTime(0, now)
						AUDIO_J.noise[color].connect(instrument.nodes.noise[color]) // noise in, but not out
					}

				// default values
					instrument.nodes.vibratoOsc.type = "sine"
					instrument.nodes.vibratoOsc.frequency.setValueAtTime(0, now)
					instrument.nodes.vibratoGain.gain.setValueAtTime(0, now)

					instrument.nodes.effectsIn.gain.setValueAtTime(1, now)
					
					instrument.nodes.bitcrusherIn.gain.setValueAtTime(1, now)
					instrument.nodes.bitcrusherOut.gain.setValueAtTime(1, now)
					
					instrument.nodes.filterIn.gain.setValueAtTime(1, now)
					instrument.nodes.filterOut.gain.setValueAtTime(1, now)
					
					instrument.nodes.tremoloOsc.type = "sine"
					instrument.nodes.tremoloOsc.frequency.setValueAtTime(0, now)
					instrument.nodes.tremoloGain.gain.setValueAtTime(0, now)
					instrument.nodes.tremoloThrough.gain.setValueAtTime(1, now)
						
					instrument.nodes.echoIn.gain.setValueAtTime(1, now)
					instrument.nodes.delay.delayTime.setValueAtTime(0, now)
					instrument.nodes.feedback.gain.setValueAtTime(0, now)
					instrument.nodes.echoOut.gain.setValueAtTime(1, now)

					instrument.nodes.distortionIn.gain.setValueAtTime(1, now)
					instrument.nodes.distortionBy.gain.setValueAtTime(1, now)
					instrument.nodes.distortionFrom.gain.setValueAtTime(0, now)
					instrument.nodes.distortionOut.gain.setValueAtTime(1, now)

					instrument.nodes.reverbIn.gain.setValueAtTime(1, now)
					instrument.nodes.reverbBy.gain.setValueAtTime(1, now)
					instrument.nodes.reverbTo.gain.setValueAtTime(0, now)
					instrument.nodes.reverbOut.gain.setValueAtTime(1, now)
					
					instrument.nodes.compressor.threshold.setValueAtTime(0, now)
					instrument.nodes.compressor.knee.setValueAtTime(AUDIO_J.constants.defaultCompressorKnee, now)
					instrument.nodes.compressor.ratio.setValueAtTime(1, now)
					instrument.nodes.compressor.attack.setValueAtTime(0, now)
					instrument.nodes.compressor.release.setValueAtTime(0, now)
					
					instrument.nodes.volume.gain.setValueAtTime(instrument.currentVolume, now)	
					instrument.nodes.power.gain.setValueAtTime(instrument.currentPower, now)

				// connections
					instrument.nodes.vibratoOsc.connect(instrument.nodes.vibratoGain) // oscillator
					instrument.nodes.vibratoOsc.start()

					instrument.nodes.effectsIn.connect(instrument.nodes.bitcrusherIn) // pick up from envelope

						instrument.nodes.bitcrusherIn.connect(instrument.nodes.bitcrusherOut) // bypass
							instrument.nodes.bitcrusher.connect(instrument.nodes.bitcrusherOut)
						instrument.nodes.bitcrusherOut.connect(instrument.nodes.filterIn)
					
						instrument.nodes.filterIn.connect(instrument.nodes.filterOut) // bypass
							// any number of filters
						instrument.nodes.filterOut.connect(instrument.nodes.tremoloThrough)

							instrument.nodes.tremoloOsc.connect(instrument.nodes.tremoloGain) // oscillator
							instrument.nodes.tremoloOsc.start()
							instrument.nodes.tremoloGain.connect(instrument.nodes.tremoloThrough.gain)
						instrument.nodes.tremoloThrough.connect(instrument.nodes.echoIn)

						instrument.nodes.echoIn.connect(instrument.nodes.echoOut) // bypass
						instrument.nodes.echoIn.connect(instrument.nodes.delay)
							instrument.nodes.delay.connect(instrument.nodes.feedback)
								instrument.nodes.feedback.connect(instrument.nodes.delay) // loop back
							instrument.nodes.feedback.connect(instrument.nodes.echoOut)
						instrument.nodes.echoOut.connect(instrument.nodes.distortionIn)
					
						instrument.nodes.distortionIn.connect(instrument.nodes.distortionBy) // bypass
							instrument.nodes.distortionBy.connect(instrument.nodes.distortionOut)
						instrument.nodes.distortionIn.connect(instrument.nodes.distortion) // split
							instrument.nodes.distortion.connect(instrument.nodes.distortionFrom)
							instrument.nodes.distortionFrom.connect(instrument.nodes.distortionOut)
						instrument.nodes.distortionOut.connect(instrument.nodes.reverbIn)

						instrument.nodes.reverbIn.connect(instrument.nodes.reverbBy) // bypass
							instrument.nodes.reverbBy.connect(instrument.nodes.reverbOut)
						instrument.nodes.reverbIn.connect(instrument.nodes.reverbTo) // split
							instrument.nodes.reverbTo.connect(instrument.nodes.reverb)
						instrument.nodes.reverbOut.connect(instrument.nodes.compressorIn)

						instrument.nodes.compressorIn.connect(instrument.nodes.compressorBy) // bypass
							instrument.nodes.compressorBy.connect(instrument.nodes.compressorOut)
						instrument.nodes.compressorIn.connect(instrument.nodes.compressorTo) // split
							instrument.nodes.compressorTo.connect(instrument.nodes.compressor)
						instrument.nodes.compressorOut.connect(instrument.nodes.volume)


					instrument.nodes.volume.connect(instrument.nodes.panner)
						instrument.nodes.panner.connect(instrument.nodes.power)
					instrument.nodes.power.connect(AUDIO_J.master)

				/* crushBits */
					instrument.crushBits = function(event) {
						const input  = event.inputBuffer.getChannelData(0)
						const output = event.outputBuffer.getChannelData(0)
						const step = Math.pow(0.5, instrument.parameters.bitcrusher.bits)

						let wait = 0
						let hold = 0

						for (let x = 0; x < AUDIO_J.constants.bufferCount; x++) {
							wait += instrument.parameters.bitcrusher.norm
							if (wait >= 1) {
								wait -= 1
								hold  = step * Math.floor((input[x] / step) + 0.5)
							}
							output[x] = hold
						}
					}

				/* setParameters */
					instrument.setParameters = function(parameters) {
						try {
							const now = AUDIO_J.audio.currentTime || 0
							
							// name
								if (parameters.name !== undefined) {
									instrument.parameters.name = parameters.name.trim()
								}

							// power
								if (parameters.power !== undefined) {
									parameters.power = Math.max(0, Math.min(1, Math.floor(parameters.power || 0)))
									instrument.currentPower = parameters.power
									instrument.nodes.power.gain.setValueAtTime(parameters.power, now)

									// off --> kill pitches & feedback
										if (!instrument.currentPower) {
											for (let n in instrument.notes) {
												const note = instrument.notes[n]
												instrument.kill(note.pitch, note.time)
											}

											instrument.nodes.feedback.gain.cancelScheduledValues(now)
											instrument.nodes.delay.delayTime.setValueAtTime(0, now)
											instrument.nodes.feedback.gain.setValueAtTime(0, now)
										}

									// on --> reactivate feedback
										if (instrument.currentPower) {
											instrument.nodes.delay.delayTime.setValueAtTime(instrument.parameters.echo.delay, now)
											instrument.nodes.feedback.gain.setValueAtTime(instrument.parameters.echo.feedback, now)
										}
								}

							// volume
								if (parameters.volume !== undefined) {
									parameters.volume = Math.max(0, Math.min(1, parameters.volume))
									instrument.currentVolume = parameters.volume
									instrument.nodes.volume.gain.setValueAtTime(parameters.volume, now)
								}

							// oscillator
								if (parameters.imag !== undefined) {
									instrument.parameters.imag = new Float32Array(1 + AUDIO_J.constants.harmonicsCount)
									instrument.parameters.real = new Float32Array(1 + AUDIO_J.constants.harmonicsCount)
									for (let x = 1; x < instrument.parameters.imag.length; x++) {
										instrument.parameters.imag[x] = parameters.imag[x] || 0
									}
									instrument.parameters.wave = AUDIO_J.audio.createPeriodicWave(instrument.parameters.real, instrument.parameters.imag)
								}

								if (parameters.harmonics !== undefined) {
									const harmonic = Object.keys(parameters.harmonics)[0]
									instrument.parameters.imag[harmonic] = Math.max(0, Math.min(1, parameters.harmonics[harmonic]))
									instrument.parameters.wave   = AUDIO_J.audio.createPeriodicWave(instrument.parameters.real, instrument.parameters.imag)
								}

							// polysynth
								if (parameters.polysynth !== undefined) {
									for (let x in parameters.polysynth) {
										const tone = Math.max(-AUDIO_J.constants.semitonesPerOctave * 2, Math.min(AUDIO_J.constants.semitonesPerOctave * 2, x))
										if (parameters.polysynth[tone] && !instrument.parameters.polysynth[tone]) {
											instrument.parameters.polysynth[tone] = true
										}
										else if (!parameters.polysynth[tone] && instrument.parameters.polysynth[tone]) {
											delete instrument.parameters.polysynth[tone]
										}
									}
								}

							// vibrato
								if (parameters.vibrato !== undefined) {
									// parameters
										if (parameters.vibrato.wave !== undefined) {
											instrument.parameters.vibrato.wave = (parameters.vibrato.wave in AUDIO_J.simpleInstruments) ? parameters.vibrato.wave : null
										}
										if (parameters.vibrato.interval !== undefined) {
											instrument.parameters.vibrato.interval = Math.max(AUDIO_J.constants.minVibratoInterval, Math.min(AUDIO_J.constants.maxVibratoInterval, parameters.vibrato.interval)) || 0
										}
										if (parameters.vibrato.pitch !== undefined) {
											instrument.parameters.vibrato.pitch = Math.max(0, Math.min(AUDIO_J.constants.maxVibratoCents, parameters.vibrato.pitch))
										}

									// nodes
										if (!instrument.parameters.vibrato.wave || !instrument.parameters.vibrato.interval || !instrument.parameters.vibrato.pitch) {
											instrument.parameters.vibrato.active = false
											instrument.nodes.vibratoOsc.type = "sine"
											instrument.nodes.vibratoOsc.frequency.setValueAtTime(0, now)
											instrument.nodes.vibratoGain.gain.setValueAtTime(0, now)
										}
										else {
											const rate = 1 / (instrument.parameters.vibrato.interval / AUDIO_J.constants.ms)
											instrument.nodes.vibratoOsc.type = instrument.parameters.vibrato.wave
											instrument.nodes.vibratoOsc.frequency.setValueAtTime(rate, now)
											instrument.nodes.vibratoGain.gain.setValueAtTime(instrument.parameters.vibrato.pitch, now)
											instrument.parameters.vibrato.active = true
										}
								}

							// noise
								if (parameters.noise !== undefined) {
									for (let color in parameters.noise) {
										const value = Math.min(1, Math.max(0, parameters.noise[color]))
										if (value) {
											instrument.parameters.noise[color] = value
											instrument.nodes.noise[color].gain.setValueAtTime(value, now)
										}
										else if (color in instrument.parameters.noise) {
											delete instrument.parameters.noise[color]
											instrument.nodes.noise[color].gain.setValueAtTime(0, now)
										}
									}
								}

							// envelope
								if (parameters.envelope !== undefined) {
									instrument.parameters.envelope.attack  = Math.max(0, Math.min(1, parameters.envelope.attack ))
									instrument.parameters.envelope.decay   = Math.max(0, Math.min(1, parameters.envelope.decay  ))
									instrument.parameters.envelope.sustain = Math.max(0, Math.min(1, parameters.envelope.sustain))
									instrument.parameters.envelope.release = Math.max(0, Math.min(1, parameters.envelope.release))
								}

							// bitcrusher
								if (parameters.bitcrusher !== undefined) {
									// parameters
										const bits = AUDIO_J.constants.bitcrusherBits.includes(Number(parameters.bitcrusher.bits)) ? Number(parameters.bitcrusher.bits) : 0
										const norm = bits ? Math.max(0.001, Math.min(1, parameters.bitcrusher.norm)) || 1 : 0

									// no bits / norm now --> bypass
										if (!bits || !norm) {
											instrument.nodes.bitcrusherIn.disconnect()
											instrument.nodes.bitcrusherIn.connect(instrument.nodes.bitcrusherOut)
											instrument.nodes.bitcrusher.onaudioprocess = null
										}

									// bits & norm now, but not before --> reconnect
										else if (!instrument.parameters.bitcrusher.bits || !instrument.parameters.bitcrusher.norm) {
											instrument.nodes.bitcrusher.onaudioprocess = instrument.crushBits
											instrument.nodes.bitcrusherIn.disconnect()
											instrument.nodes.bitcrusherIn.connect(instrument.nodes.bitcrusher)
										}

									// set values
										instrument.parameters.bitcrusher.bits = bits
										instrument.parameters.bitcrusher.norm = norm
								}

							// filter
								if (parameters.filters !== undefined) {
									for (let f in parameters.filters) {
										const gain = Math.max(AUDIO_J.constants.filterGainMinimum, Math.min(AUDIO_J.constants.filterGainMaximum, parameters.filters[f].gain))

										// delete filter
											if (Math.abs(gain) < AUDIO_J.constants.filterGainThreshold) {
												if (instrument.nodes.filters[f]) {
													instrument.nodes.filters[f].gain.cancelScheduledValues(now)
													instrument.nodes.filters[f].disconnect()
													delete instrument.nodes.filters[f]
													delete instrument.parameters.filters[f]
												}
											}

										// new / adjust filter
											else {
												const low  = Math.max(AUDIO_J.constants.minFrequency, Math.min(AUDIO_J.constants.maxFrequency, parameters.filters[f].low ))
												const mid  = Math.max(AUDIO_J.constants.minFrequency, Math.min(AUDIO_J.constants.maxFrequency, parameters.filters[f].mid ))
												const high = Math.max(AUDIO_J.constants.minFrequency, Math.min(AUDIO_J.constants.maxFrequency, parameters.filters[f].high))
												const type = ((mid < AUDIO_J.constants.lowShelfThreshold) ? "lowshelf" : (mid > AUDIO_J.constants.highShelfThreshold) ? "highshelf" : "peaking")
												
												instrument.parameters.filters[f] = {
													low: low,
													mid: mid,
													high: high,
													type: type,
													frequency: ((type == "lowshelf") ? high : (type == "highshelf") ? low : mid),
													q:    mid / (high - low),
													gain: gain
												}

												if (!instrument.nodes.filters[f]) {
													instrument.nodes.filters[f] = AUDIO_J.audio.createBiquadFilter()	
												}
												instrument.nodes.filters[f].type = type
												instrument.nodes.filters[f].frequency.setValueAtTime(                         instrument.parameters.filters[f].frequency,  now)
												instrument.nodes.filters[f].Q.setValueAtTime(Math.min(AUDIO_J.constants.Qmax, instrument.parameters.filters[f].q),         now)
												instrument.nodes.filters[f].gain.setValueAtTime(                              instrument.parameters.filters[f].gain,       now)
											}
									}

									// manage connections
										instrument.nodes.filterIn.disconnect()

										var fkeys = Object.keys(instrument.nodes.filters) || []
										if (fkeys.length) {
											for (var f = 0; f < fkeys.length; f++) {
												instrument.nodes.filters[fkeys[f]].disconnect()
											}

											for (var f = 0; f < fkeys.length; f++) {
												if (!f) {
													instrument.nodes.filterIn.connect(instrument.nodes.filters[fkeys[f]])
												}
												if (f + 1 == fkeys.length) {
													instrument.nodes.filters[fkeys[f]].connect(instrument.nodes.filterOut)
												}
												else {
													instrument.nodes.filters[fkeys[f]].connect(instrument.nodes.filters[fkeys[f + 1]])
												}
											}
										}
										else {
											instrument.nodes.filterIn.connect(instrument.nodes.filterOut)
										}
								}

							// tremolo
								if (parameters.tremolo !== undefined) {
									// parameters
										if (parameters.tremolo.wave !== undefined) {
											instrument.parameters.tremolo.wave = (parameters.tremolo.wave in AUDIO_J.simpleInstruments) ? parameters.tremolo.wave : null
										}
										if (parameters.tremolo.interval !== undefined) {
											instrument.parameters.tremolo.interval = Math.max(AUDIO_J.constants.minTremoloInterval, Math.min(AUDIO_J.constants.maxTremoloInterval, parameters.tremolo.interval)) || 0
										}
										if (parameters.tremolo.depth !== undefined) {
											instrument.parameters.tremolo.depth = Math.max(0, Math.min(1, parameters.tremolo.depth))
										}

									// nodes
										if (!instrument.parameters.tremolo.wave || !instrument.parameters.tremolo.interval || !instrument.parameters.tremolo.depth) {
											instrument.nodes.tremoloOsc.type = "sine"
											instrument.nodes.tremoloOsc.frequency.setValueAtTime(0, now)
											instrument.nodes.tremoloGain.gain.setValueAtTime(0, now)
										}
										else {
											const rate = 1 / (instrument.parameters.tremolo.interval / AUDIO_J.constants.ms)
											instrument.nodes.tremoloOsc.type = instrument.parameters.tremolo.wave
											instrument.nodes.tremoloOsc.frequency.setValueAtTime(rate, now)
											instrument.nodes.tremoloGain.gain.setValueAtTime(instrument.parameters.tremolo.depth, now)
										}
								}

							// echo
								if (parameters.echo !== undefined) {
									instrument.parameters.echo.delay    = Math.max(0, Math.min(1, parameters.echo.delay   )) || 0
									instrument.parameters.echo.feedback = Math.max(0, Math.min(AUDIO_J.constants.echoFeedbackMaximum, parameters.echo.feedback)) || 0

									instrument.nodes.delay.delayTime.setValueAtTime(instrument.parameters.echo.delay, now)
									instrument.nodes.feedback.gain.setValueAtTime(instrument.parameters.echo.feedback, now)

									if (!instrument.parameters.echo.delay || !instrument.parameters.echo.feedback) {
										instrument.nodes.feedback.gain.cancelScheduledValues(now)
										instrument.nodes.feedback.gain.setValueAtTime(0, now)
									}
								}

							// distortion
								if (parameters.distortion !== undefined) {
									instrument.parameters.distortion = Math.max(0, Math.min(AUDIO_J.constants.maxDistortion, parameters.distortion))

									instrument.nodes.distortionFrom.gain.cancelScheduledValues(now)
									instrument.nodes.distortionBy.gain.cancelScheduledValues(now)

									if (!instrument.parameters.distortion) {
										instrument.nodes.distortionFrom.gain.setValueAtTime(instrument.nodes.distortionFrom.gain.value, now)
										instrument.nodes.distortionFrom.gain.linearRampToValueAtTime(0, now + AUDIO_J.constants.distortionTime)
										instrument.nodes.distortionBy.gain.setValueAtTime(instrument.nodes.distortionBy.gain.value, now)
										instrument.nodes.distortionBy.gain.linearRampToValueAtTime(1, now + AUDIO_J.constants.distortionTime)
									}
									else {
										const curve = new Float32Array(AUDIO_J.constants.distortionCount)
										for (let c = 0; c < AUDIO_J.constants.distortionCount; c++) {
											const x = c * (2 / AUDIO_J.constants.distortionCount) - 1
											curve[c] = ((Math.PI + instrument.parameters.distortion * x) / (Math.PI + instrument.parameters.distortion * Math.abs(x)))
										}
										instrument.nodes.distortion.curve = curve
										const proportion = Math.max(0, Math.min(1, instrument.parameters.distortion / AUDIO_J.constants.maxDistortion))

										instrument.nodes.distortionFrom.gain.setValueAtTime(instrument.nodes.distortionFrom.gain.value, now)
										instrument.nodes.distortionFrom.gain.linearRampToValueAtTime(proportion, now + AUDIO_J.constants.distortionTime)
										instrument.nodes.distortionBy.gain.setValueAtTime(instrument.nodes.distortionBy.gain.value, now)
										instrument.nodes.distortionBy.gain.linearRampToValueAtTime(1 - proportion, now + AUDIO_J.constants.distortionTime)
									}
								}

							// chorus
								if (parameters.chorus !== undefined) {
									instrument.parameters.chorus = Math.max(0, Math.min(AUDIO_J.constants.maxChorusCents, parameters.chorus))
								}

							// reverb
								if (parameters.reverb !== undefined) {
									if (parameters.reverb && !instrument.parameters.reverb) {
										instrument.nodes.reverb.buffer = AUDIO_J.reverb
										instrument.nodes.reverb.connect(instrument.nodes.reverbOut)
									}
									else if (!parameters.reverb && instrument.parameters.reverb) {
										instrument.nodes.reverb.buffer = null
										instrument.nodes.reverb.disconnect()
									}

									instrument.parameters.reverb = Math.max(0, Math.min(1, parameters.reverb)) || 0
									instrument.nodes.reverbTo.gain.setValueAtTime(instrument.parameters.reverb, now)
									instrument.nodes.reverbBy.gain.setValueAtTime(1 - instrument.parameters.reverb, now)
								}

							// compressor
								if (parameters.compressor !== undefined) {
									if (parameters.compressor.ratio && parameters.compressor.ratio !== 1 && instrument.parameters.compressor.ratio == 1) {
										instrument.nodes.compressor.connect(instrument.nodes.compressorOut)
									}
									else if (parameters.compressor.ratio && parameters.compressor.ratio == 1 && instrument.parameters.compressor.ratio !== 1) {
										instrument.nodes.compressor.disconnect()
									}

									if (parameters.compressor.threshold !== undefined) {
										instrument.parameters.compressor.threshold = Math.max(AUDIO_J.constants.minCompressorThreshold, Math.min(AUDIO_J.constants.maxCompressorThreshold, parameters.compressor.threshold))
										instrument.nodes.compressor.threshold.setValueAtTime(instrument.parameters.compressor.threshold, now)
									}
									if (parameters.compressor.knee !== undefined) {
										instrument.parameters.compressor.knee = Math.max(AUDIO_J.constants.minCompressorKnee, Math.min(AUDIO_J.constants.maxCompressorKnee, parameters.compressor.knee))
										instrument.nodes.compressor.knee.setValueAtTime(instrument.parameters.compressor.knee, now)
									}
									if (parameters.compressor.ratio !== undefined) {
										instrument.parameters.compressor.ratio = Math.max(AUDIO_J.constants.minCompressorRatio, Math.min(AUDIO_J.constants.maxCompressorRatio, parameters.compressor.ratio))
										instrument.nodes.compressor.ratio.setValueAtTime(instrument.parameters.compressor.ratio, now)
									}
									if (parameters.compressor.attack !== undefined) {
										instrument.parameters.compressor.attack = Math.max(AUDIO_J.constants.minCompressorAttack, Math.min(AUDIO_J.constants.maxCompressorAttack, parameters.compressor.attack))
										instrument.nodes.compressor.attack.setValueAtTime(instrument.parameters.compressor.attack, now)
									}
									if (parameters.compressor.release !== undefined) {
										instrument.parameters.compressor.release = Math.max(AUDIO_J.constants.minCompressorRelease, Math.min(AUDIO_J.constants.maxCompressorRelease, parameters.compressor.release))
										instrument.nodes.compressor.release.setValueAtTime(instrument.parameters.compressor.release, now)
									}
								}

							// panning
								if (parameters.panning !== undefined) {
									const value = Math.max(-1, Math.min(1, parameters.panning)) || 0
									instrument.nodes.panner.pan.cancelScheduledValues(now)
									instrument.parameters.panning = value
									instrument.nodes.panner.pan.setValueAtTime(instrument.parameters.panning, now)
								}
						} catch (error) {console.log(error)}
					}

				/* press */
					instrument.press = function(pitch, velocity, waitToTriggerMS, waitToEndMS) {
						try {
							// scheduled
								if (waitToTriggerMS) {
									setTimeout(function() {
										instrument.press(pitch, velocity, null, waitToEndMS)
									}, waitToTriggerMS)
									return
								}

							// off?
								if (!instrument.currentPower) {
									return
								}

							// info
								pitch = Math.max(AUDIO_J.constants.minPitch, Math.min(AUDIO_J.constants.maxPitch, pitch))
								const now = AUDIO_J.audio.currentTime || 0

							// note
								const note = {
									pitch: pitch,
									time: now,
									oscillators: {},
									chorus: {}
								}

							// velocity
								velocity = Math.max(AUDIO_J.constants.minVelocity, Math.min(AUDIO_J.constants.maxVelocity, (velocity || AUDIO_J.constants.defaultVelocity)))
								note.velocity = AUDIO_J.audio.createGain()
								note.velocity.gain.setValueAtTime(velocity, now)

							// noise
								for (let color in AUDIO_J.noise) {
									instrument.nodes.noise[color].connect(note.velocity)
								}

							// oscillator + vibrato
								for (let p in instrument.parameters.polysynth) {
									// info
										const distance = p
										const multiplier = Math.pow(AUDIO_J.constants.oscillatorFactor, distance)
									
									// main
										note.oscillators[p] = AUDIO_J.audio.createOscillator()
										note.oscillators[p].connect(note.velocity)
										note.oscillators[p].frequency.setValueAtTime(pitch * multiplier, now)
										note.oscillators[p].setPeriodicWave(instrument.parameters.wave)
										note.oscillators[p].start(now)

									// chorus
										if (instrument.parameters.chorus) {
											note.chorus[p] = AUDIO_J.audio.createGain()
											note.chorus[p].gain.setValueAtTime(AUDIO_J.constants.chorusGain, now)
											note.chorus[p].connect(note.velocity)

											note.oscillators[p + "##"] = AUDIO_J.audio.createOscillator()
											note.oscillators[p + "##"].connect(note.chorus[p])
											note.oscillators[p + "##"].frequency.setValueAtTime(pitch * multiplier, now)
											note.oscillators[p + "##"].detune.setValueAtTime(instrument.parameters.chorus, now)
											note.oscillators[p + "##"].setPeriodicWave(instrument.parameters.wave)
											note.oscillators[p + "##"].start(now)

											note.oscillators[p + "#"] = AUDIO_J.audio.createOscillator()
											note.oscillators[p + "#"].connect(note.chorus[p])
											note.oscillators[p + "#"].frequency.setValueAtTime(pitch * multiplier, now)
											note.oscillators[p + "#"].detune.setValueAtTime(instrument.parameters.chorus / 2, now)
											note.oscillators[p + "#"].setPeriodicWave(instrument.parameters.wave)
											note.oscillators[p + "#"].start(now)

											note.oscillators[p + "b"] = AUDIO_J.audio.createOscillator()
											note.oscillators[p + "b"].connect(note.chorus[p])
											note.oscillators[p + "b"].frequency.setValueAtTime(pitch * multiplier, now)
											note.oscillators[p + "b"].detune.setValueAtTime(instrument.parameters.chorus / -2, now)
											note.oscillators[p + "b"].setPeriodicWave(instrument.parameters.wave)
											note.oscillators[p + "b"].start(now)

											note.oscillators[p + "bb"] = AUDIO_J.audio.createOscillator()
											note.oscillators[p + "bb"].connect(note.chorus[p])
											note.oscillators[p + "bb"].frequency.setValueAtTime(pitch * multiplier, now)
											note.oscillators[p + "bb"].detune.setValueAtTime(instrument.parameters.chorus * -1, now)
											note.oscillators[p + "bb"].setPeriodicWave(instrument.parameters.wave)
											note.oscillators[p + "bb"].start(now)
										}

									// vibrato
										if (instrument.parameters.vibrato.active) {
											instrument.nodes.vibratoGain.connect(note.oscillators[p].detune)

											if (instrument.parameters.chorus) {
												instrument.nodes.vibratoGain.connect(note.oscillators[p + "##"].detune)
												instrument.nodes.vibratoGain.connect(note.oscillators[p + "#"].detune)
												instrument.nodes.vibratoGain.connect(note.oscillators[p + "b"].detune)
												instrument.nodes.vibratoGain.connect(note.oscillators[p + "bb"].detune)
											}
										}
								}

							// envelope
								const attackTime = now + (instrument.parameters.envelope.attack || 0)
								const decayTime = attackTime + (instrument.parameters.envelope.decay || 0)
								const sustainVolume = (instrument.parameters.envelope.sustain || 0)

								note.envelope = AUDIO_J.audio.createGain()
								note.velocity.connect(note.envelope)
								note.envelope.connect(instrument.nodes.effectsIn)

								note.envelope.gain.setValueAtTime(0, now)
								note.envelope.gain.linearRampToValueAtTime(1, attackTime)

								note.envelope.gain.exponentialRampToValueAtTime(sustainVolume + AUDIO_J.constants.arbitrarilySmall, decayTime)
								note.envelope.gain.linearRampToValueAtTime(sustainVolume, decayTime + AUDIO_J.constants.arbitrarilySmall)

							// no sustain
								if (!sustainVolume) {
									const postDecayTime = ((instrument.parameters.envelope.attack || 0) + (instrument.parameters.envelope.decay || 0) + AUDIO_J.constants.arbitrarilySmall) * AUDIO_J.constants.ms
									note.timeout = setTimeout(function() {
										instrument.kill(pitch, now)
									}, postDecayTime)
								}

							// wait to lift
								else if (waitToEndMS) {
									instrument.lift(pitch, waitToEndMS)
								}

							// store
								instrument.notes.push(note)
						} catch (error) {console.log(error)}
					}

				/* lift */
					instrument.lift = function(pitch, waitToTriggerMS) {
						try {
							// scheduled
								if (waitToTriggerMS) {
									setTimeout(function() {
										instrument.lift(pitch)
									}, waitToTriggerMS)
									return
								}

							// info
								pitch = Math.max(AUDIO_J.constants.minPitch, Math.min(AUDIO_J.constants.maxPitch, pitch))
								const now = AUDIO_J.audio.currentTime || 0

							// no notes
								const notes = instrument.notes.filter(function(n) {
									return n.pitch == pitch
								}) || []
								if (!notes.length) {
									return
								}

							// loop through
								for (let n in notes) {
									// note
										const note = notes[n]

									// already off
										const currentVolume = note.envelope.gain.value || 0
										if (!currentVolume) {
											instrument.kill(note.pitch, note.time)
											continue
										}

									// attack-decay only (kill already scheduled)
										const sustainVolume = instrument.parameters.envelope.sustain || 0
									 	if (!sustainVolume) {
											continue
										}

									// release
										const releaseTime = now + (instrument.parameters.envelope.release || 0)
										note.envelope.gain.cancelScheduledValues(now)
										note.envelope.gain.setValueAtTime(currentVolume, now)
										note.envelope.gain.exponentialRampToValueAtTime(AUDIO_J.constants.arbitrarilySmall, releaseTime)
										note.envelope.gain.linearRampToValueAtTime(0, releaseTime + AUDIO_J.constants.arbitrarilySmall)

									// delete
										const postReleaseTime = ((instrument.parameters.envelope.release || 0) + AUDIO_J.constants.arbitrarilySmall) * AUDIO_J.constants.ms
										note.timeout = setTimeout(function() {
											instrument.kill(note.pitch, note.time)
										}, postReleaseTime)
								}
						} catch (error) {console.log(error)}
					}

				/* kill */
					instrument.kill = function(pitch, time) {
						try {
							// get note
								const n = instrument.notes.findIndex(function(n) {
									return n.pitch == pitch && n.time == time
								})
								if (n == -1) {
									return
								}
								const note = instrument.notes[n]

							// timeout
								const now = AUDIO_J.audio.currentTime || 0
								clearInterval(note.timeout)
								delete note.timeout

							// envelope
								if (note.envelope) {
									note.envelope.gain.cancelScheduledValues(now)
									note.envelope.disconnect()
									delete note.envelope
								}

							// velocity
								if (note.velocity) {
									note.velocity.gain.cancelScheduledValues(now)
									note.velocity.disconnect()
									delete note.velocity
								}

							// chorus
								for (let c in note.chorus) {
									note.chorus[c].gain.cancelScheduledValues(now)
									note.chorus[c].disconnect()
									delete note.chorus[c]
								}

							// oscillators
								for (let o in note.oscillators) {
									note.oscillators[o].stop(now)
									note.oscillators[o].disconnect()
									delete note.oscillators[o]
								}

							// note in list
								instrument.notes.splice(n, 1)
						} catch (error) {console.log(error)}
					}
				
				// start
					instrument.setParameters(parameters || {})
					return instrument
			} catch (error) {console.log(error)}
		}

	/* getInstrument */
		AUDIO_J.getInstrument = getInstrument
		function getInstrument(name) {
			try {
				// blank
					if (!name || name == "blank") {
						return {
							"name": "new instrument"
						}
					}

				// random
					else if (name == "random") {
						// name
							const num = Math.floor(Math.random() * 10e6)

						// imag
							const imag = [0]
							for (let i = 1; i <= AUDIO_J.constants.harmonicsCount; i++) {
								imag[i] = Math.random() * (1 / i)
							}

						// polysynth
							const polysynth = {
								"0": true
							}
							if (!Math.floor(Math.random() * 4)) { polysynth["-12"] = true }
							if (!Math.floor(Math.random() * 8)) { polysynth["-7"]  = true }
							if (!Math.floor(Math.random() * 7)) { polysynth["4"]   = true }
							if (!Math.floor(Math.random() * 5)) { polysynth["7"]   = true }
							if (!Math.floor(Math.random() * 8)) { polysynth["10"]  = true }
							if (!Math.floor(Math.random() * 4)) { polysynth["12"]  = true }

						// vibrato
							const vibrato = {
								wave:     null,
								pitch:    0,
								interval: 0
							}
							if (!Math.floor(Math.random() * 3)) {
								vibrato.wave = Object.keys(AUDIO_J.simpleInstruments)[Math.floor(Math.random() * Object.keys(AUDIO_J.simpleInstruments).length)]
								vibrato.pitch = Math.round(Math.random() * AUDIO_J.constants.maxVibratoCents)
								vibrato.interval = Math.round(Math.random() * AUDIO_J.constants.maxVibratoInterval)
							}

						// noise
							const noise = {}
							if (!Math.floor(Math.random() * 3)) { noise.white = Math.floor(Math.random() * 3) / 10 }
							if (!Math.floor(Math.random() * 2)) { noise.pink  = Math.floor(Math.random() * 4) / 10 }
							if (!Math.floor(Math.random() * 2)) { noise.brown = Math.floor(Math.random() * 5) / 10 }

						// envelope
							const envelope = {}
							for (let i in AUDIO_J.constants.envelopeComponents) {
								envelope[AUDIO_J.constants.envelopeComponents[i]] = Math.random()
							}

						// bitcrusher
							const bits = Math.floor(Math.random() * 4) ? AUDIO_J.constants.bitcrusherBits[Math.floor(Math.random() * AUDIO_J.constants.bitcrusherBits.length)] : 0
							const bitcrusher = {
								bits: bits,
								norm: bits ? Math.random() : 0
							}

						// filter
							const filters = {}
							const filterCount = Math.floor(Math.random() * 3)
							for (let f = 0; f < filterCount; f++) {
								const midMidi  = (Math.random() * AUDIO_J.constants.semitonesPerOctave * (AUDIO_J.constants.filterOctaves - 2)) + AUDIO_J.constants.semitonesPerOctave
								const distance = (Math.random() * AUDIO_J.constants.semitonesPerOctave * 2)
								const lowMidi  = midMidi - distance
								const highMidi = midMidi + distance
								
								filters[String(f)] = {
									low:  AUDIO_J.convertMidiToHz(lowMidi),
									mid:  AUDIO_J.convertMidiToHz(midMidi),
									high: AUDIO_J.convertMidiToHz(highMidi),
									gain: Math.random() * (AUDIO_J.constants.filterGainMaximum / 2) * (Math.floor(Math.random() * 2) ? 1 : -1)
								}
							}

						// tremolo
							const tremolo = {
								wave:     null,
								depth:    0,
								interval: 0
							}
							if (!Math.floor(Math.random() * 4)) {
								tremolo.wave = Object.keys(AUDIO_J.simpleInstruments)[Math.floor(Math.random() * Object.keys(AUDIO_J.simpleInstruments).length)]
								tremolo.depth = Math.random()
								tremolo.interval = Math.round(Math.random() * AUDIO_J.constants.maxTremoloInterval)
							}

						// echo
							const echo = {
								delay: 0,
								feedback: 0
							}
							if (Math.floor(Math.random() * 3)) {
								echo.delay =    Math.random() * 0.5
								echo.feedback = Math.random() * 0.8
							}

						// distortion
							const distortion = !Math.floor(Math.random() * 4) ? (Math.random() * AUDIO_J.constants.maxDistortion) : 0

						// chorus
							const chorus = !Math.floor(Math.random() * 4) ? (Math.random() * AUDIO_J.constants.maxChorusCents) : 0

						// reverb
							const reverb = !Math.floor(Math.random() * 4) ? Math.random() : 0

						// instrument
							return {
								name: "synthesizer #" + num,
								imag: imag,
								vibrato: vibrato,
								polysynth: polysynth,
								noise: noise,
								envelope: envelope,
								bitcrusher: bitcrusher,
								filters: filters,
								tremolo: tremolo,
								echo: echo,
								distortion: distortion,
								chorus: chorus,
								reverb: reverb
							}
					}
				
				// from simple list
					else if (name in AUDIO_J.simpleInstruments) {
						return AUDIO_J.simpleInstruments[name]
					}

				// from default list
					else if (name in AUDIO_J.defaultInstruments) {
						return AUDIO_J.defaultInstruments[name]
					}
					
				// from localstorage
					else if (window.localStorage.synthesizers) {
						const customInstruments = JSON.parse(window.localStorage.synthesizers)
						if (name in customInstruments) {
							return customInstruments[name]
						}
					}
				
				// not found
					return null
			} catch (error) {console.log(error)}
		}

	/* getInstruments */
		AUDIO_J.getInstruments = getInstruments
		function getInstruments(options) {
			try {
				// includes
					const includeList = options.include || ["blank", "random", "simple", "default", "custom"]
					const grouping = options.grouping && ["flat", "creator", "family"].includes(options.grouping) ? options.grouping : "family"
					const format = options.format && ["names", "parameters", "select"].includes(options.format) ? options.format : "names"

				// pull lists
					const simpleNames = Object.keys(AUDIO_J.simpleInstruments)
					const defaultNames = Object.keys(AUDIO_J.defaultInstruments)
					const customNames = []
					const customInstruments = {}
					if (includeList.includes("custom") && window.localStorage.synthesizers) {
						const localInstruments = JSON.parse(window.localStorage.synthesizers)
						if (typeof localInstruments == "object") {
							for (let i in localInstruments) {
								customNames.push(i)
								customInstruments[i] = localInstruments[i]
							}
						}
					}

				// build flat name list first
					const flatList = []
					if (includeList.includes("blank")) {
						flatList.push("blank")
					}
					if (includeList.includes("random")) {
						flatList.push("random")
					}
					if (includeList.includes("simple")) {
						for (let n in simpleNames) {
							flatList.push(simpleNames[n])
						}
					}
					if (includeList.includes("default")) {
						for (let n in defaultNames) {
							flatList.push(defaultNames[n])
						}
					}
					if (includeList.includes("custom")) {
						for (let i in customInstruments) {
							flatList.push(i)
						}
					}

				// grouping: flat list
					if (grouping == "flat") {
						// format: names
							if (format == "names") {
								return flatList
							}

						// format: parameters
							if (format == "parameters") {
								return flatList.map(function(name) {
									return customNames.includes(name) ? customInstruments[name] : getInstrument(name)
								})
							}

						// format: select
							if (format == "select") {
								const selectElement = options.select || document.createElement("select")
								for (let i in flatList) {
									const name = flatList[i]
									const optionElement = document.createElement("option")
										option.value = name
										option.innerText = name
									selectElement.appendChild(optionElement)
								}
								return selectElement
							}
					}

				// grouping: creator / family
					if (grouping == "creator" || grouping == "family") {
						const output = {}

						// select
							if (format == "select") {
								output._select = options.select || document.createElement("select")
							}
						
						// keys based on includeList
							if (includeList.includes("blank") || includeList.includes("random")) {
								output.new = (format == "names" ? [] : {})
								if (format == "select") {
									output.new._optgroup = document.createElement("optgroup")
									output.new._optgroup.label = "new"
									output._select.appendChild(output.new._optgroup)
								}
							}
							if (includeList.includes("simple")) {
								output.simple = (format == "names" ? [] : {})
								if (format == "select") {
									output.simple._optgroup = document.createElement("optgroup")
									output.simple._optgroup.label = "simple"
									output._select.appendChild(output.simple._optgroup)
								}
							}
							if (includeList.includes("default")) {
								if (grouping == "creator") {
									output.default = (format == "names" ? [] : {})
									if (format == "select") {
										output.default._optgroup = document.createElement("optgroup")
										output.default._optgroup.label = "default"
										output._select.appendChild(output.default._optgroup)
									}
								}
								else if (grouping == "family") {
									for (let i in AUDIO_J.constants.instrumentFamilies) {
										const family = AUDIO_J.constants.instrumentFamilies[i]
										output[family] = (format == "names" ? [] : {})
										if (format == "select") {
											output[family]._optgroup = document.createElement("optgroup")
											output[family]._optgroup.label = family
											output._select.appendChild(output[family]._optgroup)
										}
									}
								}
							}
							if (includeList.includes("custom")) {
								output.custom = (format == "names" ? [] : {})
								if (format == "select") {
									output.custom._optgroup = document.createElement("optgroup")
									output.custom._optgroup.label = "custom"
									output._select.appendChild(output.custom._optgroup)
								}
							}

						// loop through names
							for (let i in flatList) {
								// name && parameters
									const name = flatList[i]
									const parameters = (name == "blank" || name == "random") ? {} :
										(simpleNames.includes(name) || defaultNames.includes(name)) ? getInstrument(name) : 
										customNames.includes(name) ? customInstruments[name] : null
									if (!parameters) {
										continue
									}
								
								// subset by creator (or family)
									const subset = (name == "blank" || name == "random") ? "new" : 
													simpleNames.includes(name) ? "simple" :
													defaultNames.includes(name) ? 
														(grouping == "family" ? parameters.type : "default") :
													"custom"

								// format
									if (format == "names") {
										output[subset].push(name)
									}
									if (format == "parameters") {
										output[subset][name] = parameters
									}
									if (format == "select") {
										const option = document.createElement("option")
											option.value = name
											option.innerText = name
										output[subset]._optgroup.appendChild(option)
										output[subset][name] = option
									}
							}

						// return
							return output
					}
			} catch (error) {console.log(error)}
		}

/*** MIDI ***/
	/* buildMidi */
		if (navigator.requestMIDIAccess) {
			navigator.requestMIDIAccess().then(buildMidi)
		}
		function buildMidi(midi) {
			try {
				// no midi
					if (!midi) {
						return
					}

				// create midi object
					AUDIO_J.midi.system = midi
					AUDIO_J.midi.controllers = {}
					AUDIO_J.midi.consumers   = {}

				// check inputs & outputs
					AUDIO_J.midi.system.onstatechange = function(event) {
						try {
							console.log(event.port.name + " " + event.port.manufacturer + " " + event.port.state)
							updateMidiInputs()
							updateMidiOutputs()
						} catch (error) {console.log(error)}
					}

				// wait until other javascript loads in case there are connection listeners
					setTimeout(function() {
						updateMidiInputs()
						updateMidiOutputs()
					}, 0)
			} catch (error) {console.log(error)}
		}

	/* update controllers */
		function updateMidiInputs() {
			try {
				// get existing
					const previousControllers = Object.keys(AUDIO_J.midi.controllers)

				// add new
					const inputs = AUDIO_J.midi.system.inputs.values()
					const newControllers = []
					for (let input = inputs.next(); input && !input.done; input = inputs.next()) {
						const id = input.value.name + "_" + input.value.id
						
						if (previousControllers.includes(id)) {
							previousControllers.splice(previousControllers.indexOf(id))
							continue
						}
						
						if (!previousControllers.includes(id)) {
							newControllers.push(id)
							AUDIO_J.midi.controllers[id] = input.value
							AUDIO_J.midi.controllers[id].onmidimessage = receiveMidiMessage

							if (AUDIO_J.midi.connectDevice) {
								AUDIO_J.midi.connectDevice("controller", id)
							}
						}
					}

				// remove old
					for (let i in previousControllers) {
						delete AUDIO_J.midi.controllers[previousControllers[i]]

						if (AUDIO_J.midi.disconnectDevice) {
							AUDIO_J.midi.disconnectDevice("controller", previousControllers[i])
						}
					}
			} catch (error) {console.log(error)}
		}

	/* update consumers */
		function updateMidiOutputs() {
			try {
				// get existing
					const previousConsumers = Object.keys(AUDIO_J.midi.consumers)

				// add new
					const outputs = AUDIO_J.midi.system.outputs.values()
					const newConsumers = []
					for (let output = outputs.next(); output && !output.done; output = outputs.next()) {
						const id = output.value.name + "_" + output.value.id
						
						if (previousConsumers.includes(id)) {
							previousConsumers.splice(previousConsumers.indexOf(id))
							continue
						}
						
						if (!previousConsumers.includes(id)) {
							newConsumers.push(id)
							AUDIO_J.midi.consumers[id] = output.value

							if (AUDIO_J.midi.connectDevice) {
								AUDIO_J.midi.connectDevice("consumer", id)
							}
						}
					}

				// remove old
					for (let i in previousConsumers) {
						delete AUDIO_J.midi.consumers[previousConsumers[i]]

						if (AUDIO_J.midi.disconnectDevice) {
							AUDIO_J.midi.disconnectDevice("consumer", previousConsumers[i])
						}
					}
			} catch (error) {console.log(error)}
		}

	/* receive Midi message */
		function receiveMidiMessage(event) {
			try {
				// active instrument
					const activeInstrument = AUDIO_J.instruments && AUDIO_J.activeInstrumentId ? AUDIO_J.instruments[AUDIO_J.activeInstrumentId] : null
					if (!activeInstrument) {
						return
					}

				// press key
					if ((event.data[0] == 144) && event.data[2]) {
						const note = event.data[1]
						const velocity = event.data[2] / AUDIO_J.constants.midiVelocityFactor

						activeInstrument.press(AUDIO_J.getNote(note)[0], 0, velocity)
						if (AUDIO_J.midi.pressKey) {
							AUDIO_J.midi.pressKey(note, velocity)
						}

						if (AUDIO_J.pedal && AUDIO_J.sustained[note]) {
							delete AUDIO_J.sustained[note]
						}
						return
					}

				// lift key
					if ((event.data[0] == 128) || (event.data[0] == 144)) {
						const note = event.data[1]

						if (!AUDIO_J.pedal) {
							activeInstrument.lift(AUDIO_J.getNote(note)[0])
							if (AUDIO_J.midi.liftKey) {
								AUDIO_J.midi.liftKey(note)
							}
						}
						else {
							AUDIO_J.sustained[note] = true
						}
						return
					}

				// press pedal
					if ((event.data[0] == 176 || event.data[0] == 177) && (event.data[1] == 64) && event.data[2]) {
						if (!AUDIO_J.pedal) {
							AUDIO_J.pedal = true
							if (AUDIO_J.midi.pressPedal) {
								AUDIO_J.midi.pressPedal()
							}
						}
						return
					}

				// lift pedal
					if ((event.data[0] == 176 || event.data[0] == 177) && (event.data[1] == 64)) {
						if (AUDIO_J.pedal) {
							AUDIO_J.pedal = null
							if (AUDIO_J.midi.liftPedal) {
								AUDIO_J.midi.liftPedal()
							}

							for (let s in AUDIO_J.sustained) {
								const note = s
								delete AUDIO_J.sustained[s]
								activeInstrument.lift(AUDIO_J.getNote(note)[0])
								if (AUDIO_J.midi.liftKey) {
									AUDIO_J.midi.liftKey(note)
								}
							}
						}
						return
					}
			} catch (error) {console.log(error)}
		}

/*** recording ***/
	/* buildRecorder */
		function buildRecorder() {
			try {
				// destination
					AUDIO_J.recorder.mediaStreamDestination = AUDIO_J.audio.createMediaStreamDestination()
					AUDIO_J.master.connect(AUDIO_J.recorder.mediaStreamDestination)

				// recorder
					try {
						AUDIO_J.recorder.mediaRecorder = new MediaRecorder(AUDIO_J.recorder.mediaStreamDestination.stream, {mimeType: "audio/webm;codecs=opus"})
					} catch (e) {
						AUDIO_J.recorder.mediaRecorder = new MediaRecorder(AUDIO_J.recorder.mediaStreamDestination.stream)
					}

				// data while recording
					AUDIO_J.recorder.mediaRecorder.ondataavailable = function(event) {
						AUDIO_J.recorder.data.push(event.data)
					}

				// stop recording
					AUDIO_J.recorder.mediaRecorder.onstop = function(event) {
						// download
							if (AUDIO_J.recorder.data.length && AUDIO_J.recorder.download) {
								const dataBlob = new Blob(AUDIO_J.recorder.data)
								const downloadLink = document.createElement("a")
									downloadLink.href = URL.createObjectURL(dataBlob, {"type": "audio/webm;codecs=opus"})
									downloadLink.download = (document.title || "audio_j") + "_" + new Date().getTime() + ".webm"
									downloadLink.style.display = "none"
									downloadLink.onclick = function(event) { document.body.removeChild(event.target) }
								document.body.appendChild(downloadLink)
								downloadLink.click()
							}

						// clear data
							AUDIO_J.recorder.download = false
							AUDIO_J.recorder.data = []
					}
			} catch (error) {console.log(error)}
		}

	/* startRecording */
		AUDIO_J.startRecording = startRecording
		function startRecording() {
			try {
				// no audio
					if (!AUDIO_J.audio || !AUDIO_J.recorder || !AUDIO_J.recorder.mediaStreamDestination || !AUDIO_J.recorder.mediaRecorder) {
						return
					}

				// already recording
					if (AUDIO_J.recorder.mediaRecorder.state == "recording") {
						return
					}

				// start recording
					AUDIO_J.recorder.mediaRecorder.start()
			} catch (error) {console.log(error)}
		}

	/* stopRecording */
		AUDIO_J.stopRecording = stopRecording
		function stopRecording() {
			try {
				// no audio
					if (!AUDIO_J.audio || !AUDIO_J.recorder || !AUDIO_J.recorder.mediaStreamDestination || !AUDIO_J.recorder.mediaRecorder) {
						return
					}

				// already stopped
					if (AUDIO_J.recorder.mediaRecorder.state !== "recording") {
						return
					}

				// stop recording
					AUDIO_J.recorder.download = true
					AUDIO_J.recorder.mediaRecorder.stop()
			} catch (error) {console.log(error)}
		}

	/* cancelRecording */
		AUDIO_J.cancelRecording = cancelRecording
		function cancelRecording() {
			try {
				// no audio
					if (!AUDIO_J.audio || !AUDIO_J.recorder || !AUDIO_J.recorder.mediaStreamDestination || !AUDIO_J.recorder.mediaRecorder) {
						return
					}

				// already stopped
					if (AUDIO_J.recorder.mediaRecorder.state !== "recording") {
						return
					}

				// stop recording
					AUDIO_J.recorder.download = false
					AUDIO_J.recorder.mediaRecorder.stop()
			} catch (error) {console.log(error)}
		}
